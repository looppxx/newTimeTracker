2024-01-23 09:21:50.990 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:21:51.019 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:21:51.038 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:21:51.042 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:21:51.053 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:21:51.061 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:21:51.082 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:21:51.083 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:22:01.090 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:22:01.091 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:22:01.092 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:22:01.110 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:22:01.110 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:22:03.135 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:22:03.137 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:22:03.161 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:22:03.180 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:22:03.184 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:22:03.195 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:22:03.203 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:22:03.222 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:22:03.222 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:22:13.224 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:22:13.224 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:22:13.225 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:22:13.243 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:22:13.243 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:22:15.279 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:22:15.281 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:22:15.305 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:22:15.327 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:22:15.330 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:22:15.343 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:22:15.351 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:22:15.375 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:22:15.375 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:22:25.382 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:22:25.382 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:22:25.384 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:22:25.396 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:22:25.397 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:22:27.432 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:22:27.433 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:22:27.457 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:22:27.482 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:22:27.484 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:22:27.497 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:22:27.504 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:22:27.529 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:22:27.529 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:22:37.529 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:22:37.529 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:22:37.530 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:22:37.547 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:22:37.547 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:22:39.580 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:22:39.582 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:22:39.607 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:22:39.632 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:22:39.635 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:22:39.648 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:22:39.655 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:22:39.680 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:22:39.680 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:22:49.706 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:22:49.707 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:22:49.708 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:22:49.725 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:22:49.725 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:22:51.760 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:22:51.761 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:22:51.787 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:22:51.809 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:22:51.812 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:22:51.824 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:22:51.831 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:22:51.855 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:22:51.855 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:23:01.865 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:23:01.866 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:23:01.867 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:23:01.880 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:23:01.880 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:23:03.900 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:23:03.901 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:23:03.919 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:23:03.945 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:23:03.947 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:23:03.960 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:23:03.968 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:23:03.993 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:23:03.993 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:23:14.004 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:23:14.005 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:23:14.006 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:23:14.023 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:23:14.023 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:23:16.077 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:23:16.079 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:23:16.103 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:23:16.127 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:23:16.130 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:23:16.141 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:23:16.148 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:23:16.170 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:23:16.170 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:23:26.183 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:23:26.183 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:23:26.184 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:23:26.196 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:23:26.196 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:23:28.231 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:23:28.233 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:23:28.256 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:23:28.276 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:23:28.279 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:23:28.291 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:23:28.299 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:23:28.319 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:23:28.319 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:23:38.323 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:23:38.324 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:23:38.325 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:23:38.341 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:23:38.341 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:23:40.371 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:23:40.373 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:23:40.391 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:23:40.415 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:23:40.418 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:23:40.431 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:23:40.438 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:23:40.461 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:23:40.461 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:23:50.474 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:23:50.475 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:23:50.476 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:23:50.494 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:23:50.494 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:23:52.538 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:23:52.539 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:23:52.564 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:23:52.589 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:23:52.592 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:23:52.605 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:23:52.612 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:23:52.633 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:23:52.633 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:24:02.642 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:24:02.642 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:24:02.644 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:24:02.661 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:24:02.661 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:24:04.686 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:24:04.687 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:24:04.712 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:24:04.736 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:24:04.739 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:24:04.751 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:24:04.759 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:24:04.780 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:24:04.781 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:24:14.794 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:24:14.795 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:24:14.796 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:24:14.813 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:24:14.813 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:24:16.846 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:24:16.847 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:24:16.871 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:24:16.895 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:24:16.898 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:24:16.909 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:24:16.916 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:24:16.938 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:24:16.938 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:24:26.948 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:24:26.948 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:24:26.949 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:24:26.967 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:24:26.967 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:24:29.001 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:24:29.003 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:24:29.027 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:24:29.053 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:24:29.055 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:24:29.067 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:24:29.075 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:24:29.097 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:24:29.097 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:24:39.101 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:24:39.101 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:24:39.102 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:24:39.119 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:24:39.119 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:24:41.159 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:24:41.161 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:24:41.186 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:24:41.210 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:24:41.214 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:24:41.225 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:24:41.233 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:24:41.251 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:24:41.251 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:24:51.263 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:24:51.263 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:24:51.265 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:24:51.276 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:24:51.276 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:24:53.311 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:24:53.313 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:24:53.335 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:24:53.361 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:24:53.364 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:24:53.376 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:24:53.383 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:24:53.408 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:24:53.408 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:25:03.414 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:25:03.414 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:25:03.415 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:25:03.432 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:25:03.432 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:25:05.489 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:25:05.491 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:25:05.516 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:25:05.540 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:25:05.543 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:25:05.557 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:25:05.564 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:25:05.587 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:25:05.587 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:25:15.599 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:25:15.599 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:25:15.600 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:25:15.613 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:25:15.613 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:25:17.634 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:25:17.636 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:25:17.660 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:25:17.699 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:25:17.702 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:25:17.716 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:25:17.723 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:25:17.745 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:25:17.745 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:25:27.765 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:25:27.766 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:25:27.767 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:25:27.779 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:25:27.780 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:25:29.814 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:25:29.816 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:25:29.838 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:25:29.859 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:25:29.863 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:25:29.873 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:25:29.881 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:25:29.901 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:25:29.901 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:25:39.915 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:25:39.916 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:25:39.917 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:25:39.934 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:25:39.934 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:25:41.967 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:25:41.969 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:25:41.993 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:25:42.015 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:25:42.018 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:25:42.029 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:25:42.036 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:25:42.058 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:25:42.058 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:25:52.072 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:25:52.073 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:25:52.074 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:25:52.090 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:25:52.090 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:25:54.123 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:25:54.125 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:25:54.149 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:25:54.171 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:25:54.174 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:25:54.186 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:25:54.193 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:25:54.215 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:25:54.215 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:26:04.235 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:26:04.236 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:26:04.237 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:26:04.254 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:26:04.254 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:26:06.296 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:26:06.298 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:26:06.316 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:26:06.340 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:26:06.343 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:26:06.355 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:26:06.362 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:26:06.382 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:26:06.382 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:26:16.402 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:26:16.402 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:26:16.403 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:26:16.414 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:26:16.414 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:26:18.432 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:26:18.434 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:26:18.452 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:26:18.470 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:26:18.474 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:26:18.486 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:26:18.493 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:26:18.510 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:26:18.510 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:26:28.529 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:26:28.530 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:26:28.531 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:26:28.549 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:26:28.549 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:26:30.568 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:26:30.570 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:26:30.594 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:26:30.617 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:26:30.620 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:26:30.630 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:26:30.638 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:26:30.661 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:26:30.661 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:26:40.663 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:26:40.663 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:26:40.664 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:26:40.682 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:26:40.683 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:26:42.715 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:26:42.717 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:26:42.743 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:26:42.760 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:26:42.764 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:26:42.775 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:26:42.784 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:26:42.801 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:26:42.801 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:26:52.801 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:26:52.801 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:26:52.802 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:26:52.818 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:26:52.818 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:26:54.830 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:26:54.832 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:26:54.858 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:26:54.879 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:26:54.883 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:26:54.894 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:26:54.902 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:26:54.922 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:26:54.922 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:27:04.925 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:27:04.926 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:27:04.927 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:27:04.938 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:27:04.938 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:27:06.947 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:27:06.949 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:27:06.974 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:27:06.996 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:27:07.000 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:27:07.012 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:27:07.020 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:27:07.039 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:27:07.039 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:27:17.063 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:27:17.064 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:27:17.065 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:27:17.077 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:27:17.077 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:27:19.085 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:27:19.087 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:27:19.110 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:27:19.132 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:27:19.135 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:27:19.146 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:27:19.154 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:27:19.171 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:27:19.171 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:27:29.182 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:27:29.182 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:27:29.184 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:27:29.203 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:27:29.203 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:27:31.223 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:27:31.225 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:27:31.248 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:27:31.271 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:27:31.274 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:27:31.286 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:27:31.293 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:27:31.314 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:27:31.314 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:27:41.319 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:27:41.320 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:27:41.321 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:27:41.338 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:27:41.338 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:27:43.379 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:27:43.381 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:27:43.398 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:27:43.421 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:27:43.424 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:27:43.436 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:27:43.444 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:27:43.464 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:27:43.464 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:27:53.476 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:27:53.477 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:27:53.478 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:27:53.494 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:27:53.494 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:27:55.529 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:27:55.530 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:27:55.553 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:27:55.571 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:27:55.574 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:27:55.584 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:27:55.591 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:27:55.609 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:27:55.609 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:28:05.615 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:28:05.616 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:28:05.617 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:28:05.629 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:28:05.629 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:28:07.652 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:28:07.654 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:28:07.673 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:28:07.691 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:28:07.695 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:28:07.705 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:28:07.714 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:28:07.731 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:28:07.731 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:28:17.743 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:28:17.743 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:28:17.744 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:28:17.772 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:28:17.772 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:28:19.800 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:28:19.802 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:28:19.824 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:28:19.843 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:28:19.846 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:28:19.857 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:28:19.865 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:28:19.884 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:28:19.884 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:28:29.894 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:28:29.895 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:28:29.897 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:28:29.916 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:28:29.916 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:28:31.934 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:28:31.936 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:28:31.960 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:28:31.983 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:28:31.986 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:28:31.998 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:28:32.006 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:28:32.026 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:28:32.026 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:28:42.036 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:28:42.036 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:28:42.037 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:28:42.055 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:28:42.055 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:28:44.091 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:28:44.093 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:28:44.116 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:28:44.138 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:28:44.141 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:28:44.152 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:28:44.159 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:28:44.181 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:28:44.181 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:28:54.191 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:28:54.191 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:28:54.192 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:28:54.210 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:28:54.210 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:28:56.248 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:28:56.250 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:28:56.271 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:28:56.294 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:28:56.298 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:28:56.310 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:28:56.319 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:28:56.341 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:28:56.341 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:29:06.348 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:29:06.349 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:29:06.350 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:29:06.367 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:29:06.367 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:29:08.413 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:29:08.415 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:29:08.437 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:29:08.457 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:29:08.460 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:29:08.471 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:29:08.478 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:29:08.496 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:29:08.496 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:29:18.517 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:29:18.517 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:29:18.518 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:29:18.530 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:29:18.530 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:29:20.555 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:29:20.557 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:29:20.582 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:29:20.601 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:29:20.603 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:29:20.614 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:29:20.621 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:29:20.639 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:29:20.639 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:29:30.644 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:29:30.644 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:29:30.645 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:29:30.664 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:29:30.664 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:29:32.698 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:29:32.700 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:29:32.719 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:29:32.742 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:29:32.746 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:29:32.757 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:29:32.766 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:29:32.786 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:29:32.786 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:29:42.812 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:29:42.812 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:29:42.813 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:29:42.832 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:29:42.832 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:29:44.874 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:29:44.875 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:29:44.899 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:29:44.923 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:29:44.926 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:29:44.939 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:29:44.946 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:29:44.977 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:29:44.977 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:29:54.980 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:29:54.981 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:29:54.982 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:29:54.994 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:29:54.994 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:29:57.050 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:29:57.052 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:29:57.077 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:29:57.266 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:29:57.269 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:29:57.305 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:29:57.313 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:29:57.437 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:29:57.437 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:30:07.452 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:30:07.452 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:30:07.453 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:30:07.471 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:30:07.471 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:30:09.512 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:30:09.513 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:30:09.537 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:30:09.562 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:30:09.565 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:30:09.576 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:30:09.583 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:30:09.608 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:30:09.608 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:30:19.616 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:30:19.616 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:30:19.618 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:30:19.635 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:30:19.635 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:30:21.661 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:30:21.662 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:30:21.687 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:30:21.714 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:30:21.717 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:30:21.728 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:30:21.735 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:30:21.759 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:30:21.759 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:30:31.771 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:30:31.772 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:30:31.773 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:30:31.790 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:30:31.791 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:30:33.821 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:30:33.822 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:30:33.847 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:30:33.872 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:30:33.875 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:30:33.887 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:30:33.899 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:30:33.922 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:30:33.922 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:30:43.931 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:30:43.932 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:30:43.933 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:30:43.951 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:30:43.951 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:30:46.000 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:30:46.001 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:30:46.026 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:30:46.051 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:30:46.054 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:30:46.067 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:30:46.074 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:30:46.097 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:30:46.097 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:30:56.103 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:30:56.103 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:30:56.104 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:30:56.122 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:30:56.122 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:30:58.160 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:30:58.162 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:30:58.187 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:30:58.209 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:30:58.212 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:30:58.223 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:30:58.231 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:30:58.251 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:30:58.251 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:31:08.258 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:31:08.258 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:31:08.259 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:31:08.271 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:31:08.271 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:31:10.302 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:31:10.304 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:31:10.324 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:31:10.352 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:31:10.356 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:31:10.367 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:31:10.374 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:31:10.400 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:31:10.400 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:31:20.408 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:31:20.409 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:31:20.410 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:31:20.427 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:31:20.428 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:31:22.457 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:31:22.459 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:31:22.483 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:31:22.505 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:31:22.508 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:31:22.520 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:31:22.527 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:31:22.550 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:31:22.550 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:31:32.565 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:31:32.565 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:31:32.567 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:31:32.584 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:31:32.584 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:31:34.617 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:31:34.618 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:31:34.637 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:31:34.658 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:31:34.661 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:31:34.673 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:31:34.680 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:31:34.701 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:31:34.702 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:31:44.704 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:31:44.704 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:31:44.705 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:31:44.721 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:31:44.721 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:31:46.758 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:31:46.760 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:31:46.785 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:31:46.806 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:31:46.809 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:31:46.821 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:31:46.829 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:31:46.851 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:31:46.851 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:31:56.865 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:31:56.866 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:31:56.867 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:31:56.890 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:31:56.890 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:31:58.935 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:31:58.936 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:31:58.961 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:31:58.987 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:31:58.991 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:31:59.002 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:31:59.010 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:31:59.035 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:31:59.035 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:32:09.054 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:32:09.055 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:32:09.056 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:32:09.074 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:32:09.074 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:32:11.098 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:32:11.099 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:32:11.126 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:32:11.149 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:32:11.152 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:32:11.165 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:32:11.173 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:32:11.196 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:32:11.196 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:32:21.203 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:32:21.204 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:32:21.205 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:32:21.222 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:32:21.222 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:32:23.268 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:32:23.270 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:32:23.295 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:32:23.321 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:32:23.323 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:32:23.336 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:32:23.343 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:32:23.367 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:32:23.367 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:32:33.380 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:32:33.380 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:32:33.382 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:32:33.399 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:32:33.399 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:32:35.427 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:32:35.428 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:32:35.453 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:32:35.480 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:32:35.483 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:32:35.494 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:32:35.502 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:32:35.526 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:32:35.526 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:32:45.526 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:32:45.527 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:32:45.528 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:32:45.546 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:32:45.546 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:32:47.579 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:32:47.580 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:32:47.604 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:32:47.629 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:32:47.632 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:32:47.642 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:32:47.649 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:32:47.672 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:32:47.672 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:32:57.682 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:32:57.683 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:32:57.684 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:32:57.701 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:32:57.701 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:32:59.746 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:32:59.748 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:32:59.772 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:32:59.795 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:32:59.798 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:32:59.810 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:32:59.817 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:32:59.842 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:32:59.842 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:33:09.843 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:33:09.843 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:33:09.844 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:33:09.861 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:33:09.861 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:33:11.892 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:33:11.894 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:33:11.919 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:33:11.943 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:33:11.946 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:33:11.956 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:33:11.963 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:33:11.985 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:33:11.985 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:33:21.994 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:33:21.994 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:33:21.995 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:33:22.014 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:33:22.014 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:33:24.046 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:33:24.047 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:33:24.072 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:33:24.096 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:33:24.098 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:33:24.111 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:33:24.118 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:33:24.140 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:33:24.140 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:33:34.152 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:33:34.153 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:33:34.154 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:33:34.170 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:33:34.170 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:33:36.200 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:33:36.202 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:33:36.220 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:33:36.242 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:33:36.246 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:33:36.259 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:33:36.267 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:33:36.289 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:33:36.289 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:33:46.312 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:33:46.312 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:33:46.314 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:33:46.325 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:33:46.325 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:33:48.362 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:33:48.365 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:33:48.387 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:33:48.405 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:33:48.408 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:33:48.420 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:33:48.429 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:33:48.449 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:33:48.449 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:33:58.465 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:33:58.465 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:33:58.466 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:33:58.482 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:33:58.482 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:34:00.542 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:34:00.544 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:34:01.579 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:34:01.959 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:34:01.963 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:34:01.988 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:34:01.997 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:34:02.019 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:34:02.019 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:34:12.028 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:34:12.029 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:34:12.030 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:34:12.053 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:34:12.053 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:34:14.098 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:34:14.100 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:34:14.125 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:34:14.149 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:34:14.152 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:34:14.163 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:34:14.170 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:34:14.193 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:34:14.193 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:34:24.200 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:34:24.201 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:34:24.202 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:34:24.222 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:34:24.222 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:34:26.261 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:34:26.262 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:34:26.293 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:34:26.314 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:34:26.318 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:34:26.329 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:34:26.337 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:34:26.359 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:34:26.359 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:34:36.363 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:34:36.364 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:34:36.365 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:34:36.378 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:34:36.378 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:34:38.419 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:34:38.421 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:34:38.441 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:34:38.464 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:34:38.468 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:34:38.479 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:34:38.488 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:34:38.513 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:34:38.513 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:34:48.520 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:34:48.521 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:34:48.522 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:34:48.536 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:34:48.536 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:34:50.573 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:34:50.575 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:34:50.606 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:34:50.625 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:34:50.628 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:34:50.639 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:34:50.647 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:34:50.665 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:34:50.665 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:35:00.676 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:35:00.676 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:35:00.677 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:35:00.694 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:35:00.694 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:35:02.747 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:35:02.748 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:35:02.782 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:35:02.805 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:35:02.809 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:35:02.821 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:35:02.830 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:35:02.858 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:35:02.858 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:35:12.869 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:35:12.870 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:35:12.871 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:35:12.893 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:35:12.893 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:35:14.924 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:35:14.926 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:35:14.952 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:35:14.974 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:35:14.977 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:35:14.992 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:35:15.000 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:35:15.023 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:35:15.023 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:35:25.038 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:35:25.038 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:35:25.039 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:35:25.060 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:35:25.060 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:35:27.101 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:35:27.102 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:35:27.129 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:35:27.155 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:35:27.158 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:35:27.172 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:35:27.180 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:35:27.204 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:35:27.205 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:35:37.215 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:35:37.215 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:35:37.216 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:35:37.238 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:35:37.238 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:35:39.273 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:35:39.275 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:35:39.302 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:35:39.356 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:35:39.359 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:35:39.374 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:35:39.382 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:35:39.406 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:35:39.406 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:35:49.424 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:35:49.425 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:35:49.426 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:35:49.446 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:35:49.446 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:35:51.493 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:35:51.496 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:35:51.525 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:35:51.548 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:35:51.551 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:35:51.564 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:35:51.572 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:35:51.600 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:35:51.600 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:36:01.604 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:36:01.604 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:36:01.606 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:36:01.623 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:36:01.623 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:36:03.670 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:36:03.672 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:36:03.693 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:36:03.716 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:36:03.719 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:36:03.732 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:36:03.740 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:36:03.768 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:36:03.768 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:36:13.775 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:36:13.775 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:36:13.777 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:36:13.791 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:36:13.791 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:36:15.816 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:36:15.818 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:36:15.841 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:36:15.863 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:36:15.866 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:36:15.877 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:36:15.886 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:36:15.910 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:36:15.910 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:36:25.921 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:36:25.921 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:36:25.922 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:36:25.939 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:36:25.939 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:36:27.978 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:36:27.979 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:36:28.005 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:36:28.035 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:36:28.038 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:36:28.049 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:36:28.056 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:36:28.075 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:36:28.075 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:36:38.076 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:36:38.076 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:36:38.077 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:36:38.095 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:36:38.095 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:36:40.145 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:36:40.147 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:36:40.169 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:36:40.192 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:36:40.195 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:36:40.210 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:36:40.217 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:36:40.239 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:36:40.239 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:36:50.253 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:36:50.253 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:36:50.254 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:36:50.267 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:36:50.267 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:36:52.299 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:36:52.302 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:36:52.338 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:36:52.359 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:36:52.363 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:36:52.375 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:36:52.386 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:36:52.405 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:36:52.405 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:37:02.415 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:37:02.416 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:37:02.417 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:37:02.428 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:37:02.428 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:37:04.470 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:37:04.472 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:37:04.499 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:37:04.515 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:37:04.519 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:37:04.529 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:37:04.539 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:37:04.554 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:37:04.554 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:37:14.568 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:37:14.568 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:37:14.570 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:37:14.581 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:37:14.581 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:37:16.619 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:37:16.621 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:37:16.640 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:37:16.657 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:37:16.660 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:37:16.672 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:37:16.680 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:37:16.698 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:37:16.698 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:37:26.712 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:37:26.713 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:37:26.714 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:37:26.725 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:37:26.725 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:37:28.763 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:37:28.766 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:37:28.787 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:37:28.805 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:37:28.808 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:37:28.820 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:37:28.830 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:37:28.846 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:37:28.847 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:37:38.849 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:37:38.850 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:37:38.851 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:37:38.867 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:37:38.867 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:37:40.899 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:37:40.900 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:37:40.919 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:37:40.937 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:37:40.940 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:37:40.951 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:37:40.959 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:37:40.976 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:37:40.976 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:37:50.980 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:37:50.980 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:37:50.981 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:37:50.998 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:37:50.998 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:37:53.064 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:37:53.066 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:37:53.084 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:37:53.100 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:37:53.104 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:37:53.114 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:37:53.122 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:37:53.138 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:37:53.138 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:38:03.163 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:38:03.163 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:38:03.164 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:38:03.175 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:38:03.175 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:38:05.206 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:38:05.208 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:38:05.232 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:38:05.254 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:38:05.257 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:38:05.268 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:38:05.279 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:38:05.295 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:38:05.295 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:38:15.303 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:38:15.303 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:38:15.304 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:38:15.315 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:38:15.315 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:38:17.354 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:38:17.356 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:38:17.375 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:38:17.392 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:38:17.396 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:38:17.406 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:38:17.414 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:38:17.431 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:38:17.431 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:38:27.441 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:38:27.441 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:38:27.442 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:38:27.458 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:38:27.458 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:38:29.489 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:38:29.491 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:38:29.510 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:38:29.529 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:38:29.532 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:38:29.542 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:38:29.550 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:38:29.567 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:38:29.567 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:38:39.568 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:38:39.569 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:38:39.570 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:38:39.581 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:38:39.581 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:38:41.631 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:38:41.632 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:38:41.651 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:38:41.668 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:38:41.671 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:38:41.682 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:38:41.690 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:38:41.707 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:38:41.707 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:38:51.709 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:38:51.709 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:38:51.710 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:38:51.721 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:38:51.721 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:38:53.758 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:38:53.761 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:38:53.784 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:38:53.804 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:38:53.807 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:38:53.819 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:38:53.827 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:38:53.845 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:38:53.845 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:39:03.855 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:39:03.856 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:39:03.857 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:39:03.877 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:39:03.877 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:39:05.930 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:39:05.932 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:39:05.950 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:39:05.968 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:39:05.971 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:39:05.983 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:39:05.990 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:39:06.008 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:39:06.008 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:39:16.029 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:39:16.030 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:39:16.031 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:39:16.053 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:39:16.053 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:39:18.106 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:39:18.108 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:39:18.132 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:39:18.151 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:39:18.154 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:39:18.166 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:39:18.174 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:39:18.193 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:39:18.193 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:39:28.196 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:39:28.197 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:39:28.198 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:39:28.215 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:39:28.215 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:39:30.225 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:39:30.226 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:39:30.251 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:39:30.274 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:39:30.277 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:39:30.298 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:39:30.306 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:39:30.331 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:39:30.331 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:39:40.346 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:39:40.346 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:39:40.347 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:39:40.364 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:39:40.364 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:39:42.384 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:39:42.386 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:39:42.409 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:39:42.432 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:39:42.435 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:39:42.445 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:39:42.453 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:39:42.473 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:39:42.474 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:39:52.480 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:39:52.481 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:39:52.482 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:39:52.499 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:39:52.499 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:39:54.526 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:39:54.528 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:39:54.554 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:39:54.579 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:39:54.582 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:39:54.595 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:39:54.602 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:39:54.626 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:39:54.626 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:40:04.645 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:40:04.645 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:40:04.647 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:40:04.660 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:40:04.660 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:40:06.682 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:40:06.683 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:40:06.708 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:40:06.731 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:40:06.734 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:40:06.746 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:40:06.753 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:40:06.775 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:40:06.775 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:40:16.789 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:40:16.790 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:40:16.791 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:40:16.807 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:40:16.808 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:40:18.832 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:40:18.834 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:40:18.854 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:40:18.873 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:40:18.877 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:40:18.893 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:40:18.902 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:40:18.919 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:40:18.919 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:40:28.927 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:40:28.927 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:40:28.928 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:40:28.940 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:40:28.940 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:40:30.951 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:40:30.953 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:40:30.973 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:40:30.997 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:40:31.000 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:40:31.010 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:40:31.017 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:40:31.037 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:40:31.037 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:40:41.049 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:40:41.049 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:40:41.050 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:40:41.068 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:40:41.068 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:40:43.110 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:40:43.112 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:40:43.136 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:40:43.160 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:40:43.163 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:40:43.176 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:40:43.183 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:40:43.206 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:40:43.206 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:40:53.217 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:40:53.218 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:40:53.219 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:40:53.240 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:40:53.240 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:40:55.284 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:40:55.286 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:40:55.309 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:40:55.331 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:40:55.334 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:40:55.347 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:40:55.354 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:40:55.378 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:40:55.378 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:41:05.389 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:41:05.389 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:41:05.390 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:41:05.402 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:41:05.402 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:41:07.450 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:41:07.452 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:41:07.478 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:41:07.502 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:41:07.506 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:41:07.517 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:41:07.524 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:41:07.545 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:41:07.545 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:41:17.548 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:41:17.549 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:41:17.550 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:41:17.566 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:41:17.566 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:41:19.605 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:41:19.606 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:41:19.631 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:41:19.654 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:41:19.658 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:41:19.671 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:41:19.678 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:41:19.701 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:41:19.701 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:41:29.708 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:41:29.708 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:41:29.709 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:41:29.727 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:41:29.727 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:41:31.748 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:41:31.750 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:41:31.777 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:41:31.801 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:41:31.804 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:41:31.825 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:41:31.833 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:41:31.859 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:41:31.859 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:41:41.868 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:41:41.868 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:41:41.869 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:41:41.881 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:41:41.881 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:41:43.899 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:41:43.901 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:41:43.922 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:41:43.942 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:41:43.946 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:41:43.957 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:41:43.965 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:41:43.984 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:41:43.985 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:41:54.007 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:41:54.007 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:41:54.008 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:41:54.020 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:41:54.020 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:41:56.061 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:41:56.063 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:41:56.089 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:41:56.108 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:41:56.111 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:41:56.123 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:41:56.131 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:41:56.244 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:41:56.244 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:42:06.257 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:42:06.258 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:42:06.259 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:42:06.277 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:42:06.277 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:42:08.314 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:42:08.316 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:42:08.342 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:42:08.362 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:42:08.365 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:42:08.376 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:42:08.384 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:42:08.407 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:42:08.407 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:42:18.421 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:42:18.422 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:42:18.423 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:42:18.440 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:42:18.440 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:42:20.466 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:42:20.468 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:42:20.490 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:42:20.515 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:42:20.518 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:42:20.530 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:42:20.539 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:42:20.557 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:42:20.557 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:42:30.567 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:42:30.568 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:42:30.569 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:42:30.581 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:42:30.582 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:42:32.611 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:42:32.613 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:42:32.631 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:42:32.652 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:42:32.655 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:42:32.666 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:42:32.674 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:42:32.692 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:42:32.692 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:42:42.704 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:42:42.704 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:42:42.705 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:42:42.719 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:42:42.719 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:42:44.766 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:42:44.768 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:42:44.786 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:42:44.807 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:42:44.809 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:42:44.822 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:42:44.831 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:42:44.851 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:42:44.851 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:42:54.861 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:42:54.862 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:42:54.863 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:42:54.880 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:42:54.880 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:42:56.904 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:42:56.906 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:42:56.931 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:42:56.953 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:42:56.956 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:42:56.967 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:42:56.974 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:42:56.995 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:42:56.995 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:43:07.006 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:43:07.007 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:43:07.008 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:43:07.024 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:43:07.024 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:43:09.036 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:43:09.038 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:43:09.062 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:43:09.084 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:43:09.087 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:43:09.100 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:43:09.107 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:43:09.131 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:43:09.131 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:43:19.143 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:43:19.143 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:43:19.144 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:43:19.161 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:43:19.161 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:43:21.182 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:43:21.185 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:43:21.210 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:43:21.233 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:43:21.236 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:43:21.248 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:43:21.256 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:43:21.276 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:43:21.276 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:43:31.290 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:43:31.290 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:43:31.292 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:43:31.304 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:43:31.305 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:43:33.335 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:43:33.337 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:43:33.361 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:43:33.383 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:43:33.387 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:43:33.400 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:43:33.407 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:43:33.429 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:43:33.429 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:43:43.439 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:43:43.439 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:43:43.444 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:43:43.463 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:43:43.463 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:43:45.494 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:43:45.496 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:43:45.524 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:43:45.546 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:43:45.549 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:43:45.560 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:43:45.568 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:43:45.589 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:43:45.589 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:43:55.593 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:43:55.593 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:43:55.594 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:43:55.611 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:43:55.611 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:43:57.640 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:43:57.642 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:43:57.662 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:43:57.681 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:43:57.684 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:43:57.696 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:43:57.703 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:43:57.722 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:43:57.722 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:44:07.724 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:44:07.724 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:44:07.725 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:44:07.741 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:44:07.741 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:44:09.760 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:44:09.762 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:44:09.787 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:44:09.803 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:44:09.806 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:44:09.817 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:44:09.825 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:44:09.842 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:44:09.843 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:44:19.866 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:44:19.867 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:44:19.868 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:44:19.885 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:44:19.885 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:44:21.913 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:44:21.915 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:44:21.939 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:44:21.961 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:44:21.964 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:44:21.975 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:44:21.982 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:44:22.001 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:44:22.001 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:44:32.015 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:44:32.015 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:44:32.017 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:44:32.028 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:44:32.028 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:44:34.064 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:44:34.066 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:44:34.084 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:44:34.102 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:44:34.105 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:44:34.116 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:44:34.123 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:44:34.141 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:44:34.141 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:44:44.144 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:44:44.144 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:44:44.145 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:44:44.162 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:44:44.162 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:44:46.196 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:44:46.198 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:44:46.223 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:44:46.243 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:44:46.246 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:44:46.258 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:44:46.265 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:44:46.288 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:44:46.288 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:44:56.298 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:44:56.298 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:44:56.299 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:44:56.316 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:44:56.316 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:44:58.330 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:44:58.332 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:44:58.357 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:44:58.378 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:44:58.381 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:44:58.393 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:44:58.400 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:44:58.419 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:44:58.419 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:45:08.432 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:45:08.433 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:45:08.434 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:45:08.446 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:45:08.446 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:45:10.457 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:45:10.459 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:45:10.483 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:45:10.503 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:45:10.506 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:45:10.517 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:45:10.525 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:45:10.547 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:45:10.547 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:45:20.548 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:45:20.549 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:45:20.550 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:45:20.567 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:45:20.567 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:45:22.592 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:45:22.593 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:45:22.617 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:45:22.641 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:45:22.645 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:45:22.656 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:45:22.663 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:45:22.686 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:45:22.687 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:45:32.694 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:45:32.694 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:45:32.695 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:45:32.711 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:45:32.711 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:45:34.730 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:45:34.732 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:45:34.755 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:45:34.776 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:45:34.779 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:45:34.790 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:45:34.798 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:45:34.819 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:45:34.819 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:45:44.824 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:45:44.825 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:45:44.826 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:45:44.843 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:45:44.843 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:45:46.867 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:45:46.869 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:45:46.893 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:45:46.914 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:45:46.917 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:45:46.929 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:45:46.936 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:45:46.959 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:45:46.959 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:45:56.972 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:45:56.972 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:45:56.973 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:45:56.991 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:45:56.991 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:45:59.028 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:45:59.030 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:45:59.050 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:45:59.070 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:45:59.073 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:45:59.084 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:45:59.091 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:45:59.109 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:45:59.109 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:46:09.127 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:46:09.128 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:46:09.129 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:46:09.140 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:46:09.140 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:46:11.172 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:46:11.174 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:46:11.203 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:46:11.224 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:46:11.227 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:46:11.239 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:46:11.246 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:46:11.267 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:46:11.267 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:46:21.274 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:46:21.275 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:46:21.275 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:46:21.288 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:46:21.288 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:46:23.305 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:46:23.307 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:46:23.328 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:46:23.350 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:46:23.353 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:46:23.365 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:46:23.373 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:46:23.393 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:46:23.393 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:46:33.405 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:46:33.406 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:46:33.407 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:46:33.419 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:46:33.419 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:46:35.466 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:46:35.468 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:46:35.486 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:46:35.512 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:46:35.515 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:46:35.528 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:46:35.536 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:46:35.561 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:46:35.561 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:46:45.561 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:46:45.562 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:46:45.563 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:46:45.581 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:46:45.581 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:46:47.597 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:46:47.598 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:46:47.618 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:46:47.642 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:46:47.646 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:46:47.656 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:46:47.665 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:46:47.695 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:46:47.695 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:46:57.697 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:46:57.698 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:46:57.699 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:46:57.717 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:46:57.718 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:46:59.746 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:46:59.748 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:46:59.770 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:46:59.795 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:46:59.799 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:46:59.813 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:46:59.821 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:46:59.840 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:46:59.840 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:47:09.840 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:47:09.840 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:47:09.841 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:47:09.857 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:47:09.858 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:47:11.865 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:47:11.868 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:47:11.893 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:47:11.912 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:47:11.915 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:47:11.927 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:47:11.935 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:47:11.953 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:47:11.954 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:47:21.953 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:47:21.954 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:47:21.955 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:47:21.972 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:47:21.972 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:47:23.995 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:47:23.996 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:47:24.022 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:47:24.048 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:47:24.051 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:47:24.065 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:47:24.074 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:47:24.097 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:47:24.098 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:47:34.103 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:47:34.104 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:47:34.105 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:47:34.122 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:47:34.122 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:47:36.170 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:47:36.172 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:47:36.197 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:47:36.222 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:47:36.226 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:47:36.238 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:47:36.245 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:47:36.269 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:47:36.269 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:47:46.278 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:47:46.279 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:47:46.280 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:47:46.297 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:47:46.297 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:47:48.326 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:47:48.327 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:47:48.359 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:47:48.385 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:47:48.388 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:47:48.400 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:47:48.408 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:47:48.431 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:47:48.431 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:47:58.442 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:47:58.443 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:47:58.444 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:47:58.456 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:47:58.456 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:48:00.498 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:48:00.500 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:48:00.521 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:48:00.545 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:48:00.549 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:48:00.563 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:48:00.571 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:48:00.595 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:48:00.595 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:48:10.601 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:48:10.602 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:48:10.603 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:48:10.620 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:48:10.620 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:48:12.639 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:48:12.640 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:48:12.658 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:48:12.679 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:48:12.683 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:48:12.694 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:48:12.702 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:48:12.721 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:48:12.721 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:48:22.724 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:48:22.724 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:48:22.725 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:48:22.746 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:48:22.747 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:48:24.764 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:48:24.766 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:48:24.783 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:48:24.808 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:48:24.812 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:48:24.822 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:48:24.829 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:48:24.852 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:48:24.852 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:48:34.860 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:48:34.861 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:48:34.863 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:48:34.882 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:48:34.882 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:48:36.911 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:48:36.913 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:48:36.937 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:48:36.961 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:48:36.963 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:48:36.976 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:48:36.987 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:48:37.011 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:48:37.011 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:48:47.024 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:48:47.025 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:48:47.026 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:48:47.043 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:48:47.043 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:48:49.099 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:48:49.101 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:48:49.124 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:48:49.148 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:48:49.151 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:48:49.162 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:48:49.169 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:48:49.192 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:48:49.192 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:48:59.209 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:48:59.210 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:48:59.211 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:48:59.223 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:48:59.223 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:49:01.253 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:49:01.254 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:49:01.273 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:49:01.297 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:49:01.299 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:49:01.311 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:49:01.318 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:49:01.341 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:49:01.341 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:49:11.343 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:49:11.343 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:49:11.344 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:49:11.362 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:49:11.362 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:49:13.398 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:49:13.399 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:49:13.418 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:49:13.436 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:49:13.439 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:49:13.450 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:49:13.457 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:49:13.475 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:49:13.475 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:49:23.483 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:49:23.484 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:49:23.485 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:49:23.498 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:49:23.498 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:49:25.520 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:49:25.522 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:49:25.546 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:49:25.568 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:49:25.571 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:49:25.582 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:49:25.591 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:49:25.613 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:49:25.613 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:49:35.612 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:49:35.613 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:49:35.614 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:49:35.631 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:49:35.631 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:49:37.679 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:49:37.680 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:49:37.703 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:49:37.725 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:49:37.728 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:49:37.741 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:49:37.748 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:49:37.773 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:49:37.773 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:49:47.778 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:49:47.778 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:49:47.781 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:49:47.798 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:49:47.798 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:49:49.814 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:49:49.816 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:49:49.841 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:49:49.860 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:49:49.865 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:49:49.876 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:49:49.886 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:49:49.908 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:49:49.908 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:49:59.927 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:49:59.928 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:49:59.929 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:49:59.946 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:49:59.946 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:50:01.975 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:50:01.976 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:50:02.001 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:50:02.023 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:50:02.026 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:50:02.038 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:50:02.046 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:50:02.068 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:50:02.068 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:50:12.070 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:50:12.070 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:50:12.071 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:50:12.100 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:50:12.100 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:50:14.139 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:50:14.140 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:50:14.163 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:50:14.184 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:50:14.186 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:50:14.197 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:50:14.205 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:50:14.229 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:50:14.229 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:50:24.240 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:50:24.240 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:50:24.241 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:50:24.259 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:50:24.259 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:50:26.284 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:50:26.285 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:50:26.310 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:50:26.334 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:50:26.336 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:50:26.349 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:50:26.356 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:50:26.377 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:50:26.378 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:50:36.378 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:50:36.379 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:50:36.380 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:50:36.396 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:50:36.396 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:50:38.475 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:50:38.477 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:50:38.497 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:50:38.521 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:50:38.524 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:50:38.536 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:50:38.544 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:50:38.568 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:50:38.569 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:50:48.579 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:50:48.579 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:50:48.582 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:50:48.602 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:50:48.602 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:50:50.633 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:50:50.635 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:50:50.673 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:50:50.694 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:50:50.697 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:50:50.709 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:50:50.717 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:50:50.733 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:50:50.733 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:51:00.736 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:51:00.737 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:51:00.739 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:51:00.760 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:51:00.760 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:51:02.797 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:51:02.798 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:51:02.823 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:51:02.847 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:51:02.850 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:51:02.861 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:51:02.871 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:51:02.887 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:51:02.887 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:51:12.896 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:51:12.896 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:51:12.897 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:51:12.916 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:51:12.917 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:51:14.960 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:51:14.962 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:51:14.984 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:51:15.001 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:51:15.004 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:51:15.014 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:51:15.021 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:51:15.040 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:51:15.040 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:51:25.041 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:51:25.041 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:51:25.042 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:51:25.059 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:51:25.060 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:51:27.108 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:51:27.110 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:51:27.137 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:51:27.167 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:51:27.169 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:51:27.181 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:51:27.188 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:51:27.206 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:51:27.206 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:51:37.217 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:51:37.218 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:51:37.219 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:51:37.238 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:51:37.238 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:51:39.262 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:51:39.264 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:51:39.283 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:51:39.306 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:51:39.310 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:51:39.322 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:51:39.329 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:51:39.354 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:51:39.354 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:51:49.363 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:51:49.364 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:51:49.365 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:51:49.382 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:51:49.382 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:51:51.414 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:51:51.418 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:51:51.437 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:51:51.461 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:51:51.464 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:51:51.475 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:51:51.482 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:51:51.505 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:51:51.505 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:52:01.517 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:52:01.517 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:52:01.518 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:52:01.539 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:52:01.539 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:52:03.577 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:52:03.578 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:52:03.611 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:52:03.632 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:52:03.635 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:52:03.647 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:52:03.655 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:52:03.675 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:52:03.676 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:52:13.687 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:52:13.687 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:52:13.689 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:52:13.712 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:52:13.712 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:52:15.745 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:52:15.747 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:52:15.768 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:52:15.794 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:52:15.797 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:52:15.809 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:52:15.816 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:52:15.838 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:52:15.838 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:52:25.843 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:52:25.843 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:52:25.845 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:52:25.860 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:52:25.860 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:52:27.880 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:52:27.882 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:52:27.905 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:52:27.925 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:52:27.929 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:52:27.950 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:52:27.958 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:52:27.978 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:52:27.978 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:52:38.000 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:52:38.000 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:52:38.001 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:52:38.023 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:52:38.023 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:52:40.042 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:52:40.044 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:52:40.062 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:52:40.081 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:52:40.085 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:52:40.096 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:52:40.104 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:52:40.121 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:52:40.121 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:52:50.131 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:52:50.132 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:52:50.133 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:52:50.153 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:52:50.153 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:52:52.178 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:52:52.180 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:52:52.211 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:52:52.229 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:52:52.232 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:52:52.244 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:52:52.252 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:52:52.270 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:52:52.271 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:53:02.280 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:53:02.280 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:53:02.282 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:53:02.298 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:53:02.298 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:53:04.324 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:53:04.326 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:53:04.350 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:53:04.377 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:53:04.381 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:53:04.393 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:53:04.401 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:53:04.425 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:53:04.426 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:53:14.428 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:53:14.428 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:53:14.429 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:53:14.455 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:53:14.455 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:53:16.504 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:53:16.505 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:53:16.533 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:53:16.561 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:53:16.564 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:53:16.576 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:53:16.585 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:53:16.610 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:53:16.610 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:53:26.610 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:53:26.610 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:53:26.611 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:53:26.635 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:53:26.635 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:53:28.668 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:53:28.670 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:53:28.698 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:53:28.725 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:53:28.728 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:53:28.741 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:53:28.748 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:53:28.776 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:53:28.776 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:53:38.792 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:53:38.793 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:53:38.794 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:53:38.815 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:53:38.815 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:53:40.850 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:53:40.854 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:53:40.876 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:53:40.896 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:53:40.899 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:53:40.911 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:53:40.920 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:53:40.939 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:53:40.939 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:53:50.946 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:53:50.947 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:53:50.948 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:53:50.967 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:53:50.967 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:53:52.979 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:53:52.981 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:53:53.005 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:53:53.025 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:53:53.029 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:53:53.041 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:53:53.048 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:53:53.070 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:53:53.070 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:54:03.073 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:54:03.073 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:54:03.074 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:54:03.094 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:54:03.094 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:54:05.114 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:54:05.116 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:54:05.148 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:54:05.167 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:54:05.171 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:54:05.183 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:54:05.192 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:54:05.215 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:54:05.215 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:54:15.218 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:54:15.218 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:54:15.219 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:54:15.234 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:54:15.235 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:54:17.266 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:54:17.268 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:54:17.299 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:54:17.317 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:54:17.322 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:54:17.332 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:54:17.340 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:54:17.359 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:54:17.359 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:54:27.367 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:54:27.367 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:54:27.368 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:54:27.385 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:54:27.385 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:54:29.402 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:54:29.404 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:54:29.429 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:54:29.454 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:54:29.457 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:54:29.469 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:54:29.476 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:54:29.498 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:54:29.498 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:54:39.505 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:54:39.506 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:54:39.507 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:54:39.528 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:54:39.529 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:54:41.547 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:54:41.549 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:54:41.575 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:54:41.620 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:54:41.623 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:54:41.645 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:54:41.653 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:54:41.677 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:54:41.677 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:54:51.697 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:54:51.698 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:54:51.699 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:54:51.721 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:54:51.722 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:54:53.743 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:54:53.745 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:54:53.769 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:54:53.787 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:54:53.791 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:54:53.804 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:54:53.812 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:54:53.832 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:54:53.832 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:55:03.846 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:55:03.846 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:55:03.849 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:55:03.874 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:55:03.874 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:55:05.893 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:55:05.895 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:55:05.918 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:55:05.938 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:55:05.942 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:55:05.954 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:55:05.962 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:55:05.985 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:55:05.985 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:55:16.014 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:55:16.015 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:55:16.016 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:55:16.032 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:55:16.032 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:55:18.066 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:55:18.068 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:55:18.093 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:55:18.112 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:55:18.115 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:55:18.125 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:55:18.133 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:55:18.152 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:55:18.152 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:55:28.164 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:55:28.164 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:55:28.166 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:55:28.182 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:55:28.182 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:55:30.210 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:55:30.211 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:55:30.231 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:55:30.252 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:55:30.255 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:55:30.266 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:55:30.273 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:55:30.293 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:55:30.293 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:55:40.294 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:55:40.294 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:55:40.295 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:55:40.308 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:55:40.308 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:55:42.345 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:55:42.346 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:55:42.372 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:55:42.398 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:55:42.401 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:55:42.411 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:55:42.418 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:55:42.443 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:55:42.443 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:55:52.457 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:55:52.458 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:55:52.459 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:55:52.476 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:55:52.476 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:55:54.488 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:55:54.491 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:55:54.521 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:55:54.556 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:55:54.559 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:55:54.577 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:55:54.587 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:55:54.615 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:55:54.615 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:56:04.625 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:56:04.625 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:56:04.630 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:56:04.663 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:56:04.663 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:56:06.696 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:56:06.697 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:56:06.721 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:56:06.747 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:56:06.749 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:56:06.760 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:56:06.767 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:56:06.794 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:56:06.794 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:56:16.795 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:56:16.796 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:56:16.797 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:56:16.817 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:56:16.817 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:56:18.850 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:56:18.852 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:56:18.883 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:56:18.903 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:56:18.906 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:56:18.918 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:56:18.927 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:56:18.945 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:56:18.945 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:56:28.965 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:56:28.965 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:56:28.966 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:56:28.993 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:56:28.993 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:56:31.015 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:56:31.017 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:56:31.034 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:56:31.102 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:56:31.106 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:56:31.118 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:56:31.127 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:56:31.189 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:56:31.189 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:56:41.203 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:56:41.204 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:56:41.206 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:56:41.232 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:56:41.232 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:56:43.258 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:56:43.260 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:56:43.280 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:56:43.300 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:56:43.336 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:56:43.347 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:56:43.361 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:56:43.379 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:56:43.379 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:56:53.381 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:56:53.381 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:56:53.382 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:56:53.403 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:56:53.403 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:56:55.436 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:56:55.437 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:56:55.468 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:56:55.491 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:56:55.494 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:56:55.507 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:56:55.514 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:56:55.535 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:56:55.536 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:57:05.542 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:57:05.542 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:57:05.544 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:57:05.562 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:57:05.562 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:57:07.572 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:57:07.574 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:57:07.605 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:57:07.622 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:57:07.625 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:57:07.635 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:57:07.642 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:57:07.659 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:57:07.659 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:57:17.660 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:57:17.661 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:57:17.662 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:57:17.679 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:57:17.679 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:57:19.699 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:57:19.700 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:57:19.720 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:57:19.742 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:57:19.745 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:57:19.756 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:57:19.764 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:57:19.783 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:57:19.783 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:57:29.782 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:57:29.782 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:57:29.784 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:57:29.801 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:57:29.801 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:57:31.827 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:57:31.829 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:57:31.849 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:57:31.868 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:57:31.871 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:57:31.882 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:57:31.890 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:57:31.927 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:57:31.927 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:57:41.931 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:57:41.931 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:57:41.933 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:57:41.956 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:57:41.956 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:57:43.999 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:57:44.000 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:57:44.022 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:57:44.042 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:57:44.047 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:57:44.059 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:57:44.068 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:57:44.087 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:57:44.087 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:57:54.106 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:57:54.106 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:57:54.108 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:57:54.120 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:57:54.120 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:57:56.146 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:57:56.148 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:57:56.167 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:57:56.186 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:57:56.189 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:57:56.201 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:57:56.208 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:57:56.228 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:57:56.228 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:58:06.238 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:58:06.239 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:58:06.240 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:58:06.257 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:58:06.257 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:58:08.292 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:58:08.294 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:58:08.312 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:58:08.334 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:58:08.337 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:58:08.348 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:58:08.356 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:58:08.379 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:58:08.379 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:58:18.393 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:58:18.394 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:58:18.396 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:58:18.423 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:58:18.423 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:58:20.447 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:58:20.449 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:58:20.482 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:58:20.499 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:58:20.502 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:58:20.513 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:58:20.520 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:58:20.537 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:58:20.537 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:58:30.550 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:58:30.550 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:58:30.551 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:58:30.568 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:58:30.568 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:58:32.581 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:58:32.583 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:58:32.611 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:58:32.632 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:58:32.636 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:58:32.657 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:58:32.667 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:58:32.688 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:58:32.688 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:58:42.694 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:58:42.695 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:58:42.696 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:58:42.713 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:58:42.713 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:58:44.747 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:58:44.749 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:58:44.775 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:58:44.799 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:58:44.802 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:58:44.815 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:58:44.822 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:58:44.842 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:58:44.842 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:58:54.845 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:58:54.845 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:58:54.849 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:58:54.874 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:58:54.874 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:58:56.904 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:58:56.906 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:58:56.931 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:58:56.951 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:58:56.954 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:58:56.965 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:58:56.972 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:58:57.011 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:58:57.011 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:59:07.013 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:59:07.013 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:59:07.015 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:59:07.033 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:59:07.033 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:59:09.054 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:59:09.056 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:59:09.079 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:59:09.102 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:59:09.105 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:59:09.125 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:59:09.133 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:59:09.156 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:59:09.156 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:59:19.170 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:59:19.171 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:59:19.173 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:59:19.194 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:59:19.195 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:59:21.245 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:59:21.247 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:59:21.279 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:59:21.299 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:59:21.302 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:59:21.314 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:59:21.322 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:59:21.341 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:59:21.341 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:59:31.358 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:59:31.359 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:59:31.360 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:59:31.385 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:59:31.385 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:59:33.443 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:59:33.445 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:59:33.476 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:59:33.504 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:59:33.507 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:59:33.523 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:59:33.531 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:59:33.555 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:59:33.556 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:59:43.556 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:59:43.556 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:59:43.557 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:59:43.577 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:59:43.577 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:59:45.602 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:59:45.603 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:59:45.629 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:59:45.655 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:59:45.657 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:59:45.668 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:59:45.677 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:59:45.699 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:59:45.699 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 09:59:55.704 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 09:59:55.705 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 09:59:55.706 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 09:59:55.726 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 09:59:55.726 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 09:59:57.743 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 09:59:57.745 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 09:59:57.771 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 09:59:57.795 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 09:59:57.799 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 09:59:57.811 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 09:59:57.818 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 09:59:57.836 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 09:59:57.836 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:00:07.844 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:00:07.845 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:00:07.846 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:00:07.857 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:00:07.857 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:00:09.877 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:00:09.879 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:00:09.905 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:00:09.925 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:00:09.929 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:00:09.942 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:00:09.951 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:00:09.983 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:00:09.983 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:00:20.000 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:00:20.001 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:00:20.002 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:00:20.015 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:00:20.015 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:00:22.041 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:00:22.043 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:00:22.069 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:00:22.096 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:00:22.099 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:00:22.112 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:00:22.120 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:00:22.146 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:00:22.146 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:00:32.159 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:00:32.160 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:00:32.161 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:00:32.172 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:00:32.172 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:00:34.182 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:00:34.185 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:00:34.210 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:00:34.230 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:00:34.233 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:00:34.250 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:00:34.258 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:00:34.276 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:00:34.276 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:00:44.276 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:00:44.277 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:00:44.278 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:00:44.300 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:00:44.300 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:00:46.328 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:00:46.330 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:00:46.366 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:00:46.390 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:00:46.394 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:00:46.407 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:00:46.416 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:00:46.441 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:00:46.441 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:00:56.443 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:00:56.443 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:00:56.446 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:00:56.471 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:00:56.471 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:00:58.492 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:00:58.494 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:00:58.523 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:00:58.548 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:00:58.551 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:00:58.562 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:00:58.569 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:00:58.592 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:00:58.592 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:01:08.608 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:01:08.608 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:01:08.610 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:01:08.629 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:01:08.629 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:01:10.675 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:01:10.677 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:01:10.704 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:01:10.727 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:01:10.731 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:01:10.754 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:01:10.762 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:01:10.781 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:01:10.781 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:01:20.786 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:01:20.787 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:01:20.788 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:01:20.809 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:01:20.810 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:01:22.830 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:01:22.832 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:01:22.853 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:01:22.880 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:01:22.883 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:01:22.896 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:01:22.903 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:01:22.928 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:01:22.928 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:01:32.941 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:01:32.942 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:01:32.944 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:01:32.956 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:01:32.956 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:01:34.966 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:01:34.968 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:01:34.999 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:01:35.023 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:01:35.026 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:01:35.038 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:01:35.046 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:01:35.069 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:01:35.069 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:01:45.072 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:01:45.073 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:01:45.074 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:01:45.090 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:01:45.090 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:01:47.125 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:01:47.127 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:01:47.152 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:01:47.176 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:01:47.179 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:01:47.192 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:01:47.200 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:01:47.222 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:01:47.222 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:01:57.225 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:01:57.226 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:01:57.232 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:01:57.250 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:01:57.250 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:01:59.279 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:01:59.280 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:01:59.303 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:01:59.324 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:01:59.327 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:01:59.339 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:01:59.346 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:01:59.369 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:01:59.369 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:02:09.368 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:02:09.369 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:02:09.370 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:02:09.382 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:02:09.382 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:02:11.403 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:02:11.405 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:02:11.429 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:02:11.451 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:02:11.454 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:02:11.465 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:02:11.472 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:02:11.492 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:02:11.492 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:02:21.502 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:02:21.502 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:02:21.503 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:02:21.521 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:02:21.521 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:02:23.554 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:02:23.556 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:02:23.574 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:02:23.598 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:02:23.601 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:02:23.614 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:02:23.621 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:02:23.641 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:02:23.641 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:02:30.872 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/api/v2/clients/2  
2024-01-23 10:02:30.925 +08:00 [INF] Successfully validated the token.
2024-01-23 10:02:30.931 +08:00 [INF] Authorization was successful.
2024-01-23 10:02:30.933 +08:00 [INF] Executing endpoint 'TimeTracker.Controllers.ClientsController.GetById (TimeTracker)'
2024-01-23 10:02:30.952 +08:00 [INF] Route matched with {action = "GetById", controller = "Clients"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[TimeTracker.Models.ClientModel]] GetById(Int64) on controller TimeTracker.Controllers.ClientsController (TimeTracker).
2024-01-23 10:02:30.962 +08:00 [DBG] Getting a client with id 2
2024-01-23 10:02:31.024 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'TimeTrackerDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:02:31.040 +08:00 [INF] Executing DbCommand [Parameters=[@__p_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."Name"
FROM "Clients" AS "c"
WHERE ("c"."Id" = @__p_0) AND @__p_0 IS NOT NULL
LIMIT 1
2024-01-23 10:02:31.046 +08:00 [INF] Executing ObjectResult, writing value of type 'TimeTracker.Models.ClientModel'.
2024-01-23 10:02:31.076 +08:00 [INF] Executed action TimeTracker.Controllers.ClientsController.GetById (TimeTracker) in 123.2109ms
2024-01-23 10:02:31.076 +08:00 [INF] Executed endpoint 'TimeTracker.Controllers.ClientsController.GetById (TimeTracker)'
2024-01-23 10:02:31.079 +08:00 [INF] Request finished in 206.4493ms 200 application/json; charset=utf-8
2024-01-23 10:02:33.667 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:02:33.668 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:02:33.669 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:02:33.679 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:02:33.679 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:02:35.695 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:02:35.698 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:02:35.716 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:02:35.735 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:02:35.738 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:02:35.749 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:02:35.756 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:02:35.773 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:02:35.773 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:02:45.789 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:02:45.790 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:02:45.791 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:02:45.808 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:02:45.808 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:02:47.843 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:02:47.845 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:02:47.868 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:02:47.891 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:02:47.894 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:02:47.906 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:02:47.913 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:02:47.936 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:02:47.936 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:02:57.940 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:02:57.941 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
