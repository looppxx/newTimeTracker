2024-01-23 10:02:57.942 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:02:57.979 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:02:57.979 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:02:59.994 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:02:59.996 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:03:00.016 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:03:00.033 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:03:00.036 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:03:00.047 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:03:00.055 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:03:00.073 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:03:00.073 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:03:10.074 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:03:10.075 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:03:10.076 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:03:10.087 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:03:10.087 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:03:12.113 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:03:12.115 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:03:12.138 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:03:12.159 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:03:12.162 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:03:12.174 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:03:12.181 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:03:12.206 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:03:12.206 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:03:22.208 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:03:22.208 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:03:22.210 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:03:22.221 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:03:22.221 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:03:24.262 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:03:24.264 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:03:24.285 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:03:24.305 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:03:24.310 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:03:24.321 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:03:24.328 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:03:24.347 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:03:24.347 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:03:34.359 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:03:34.360 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:03:34.361 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:03:34.377 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:03:34.378 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:03:36.396 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:03:36.398 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:03:36.422 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:03:36.440 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:03:36.443 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:03:36.455 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:03:36.464 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:03:36.483 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:03:36.483 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:03:46.492 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:03:46.493 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:03:46.494 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:03:46.512 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:03:46.512 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:03:48.530 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:03:48.531 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:03:48.550 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:03:48.571 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:03:48.574 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:03:48.586 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:03:48.593 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:03:48.614 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:03:48.614 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:03:58.625 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:03:58.625 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:03:58.627 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:03:58.645 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:03:58.645 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:04:00.678 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:04:00.679 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:04:00.702 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:04:00.725 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:04:00.728 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:04:00.739 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:04:00.746 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:04:00.768 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:04:00.768 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:04:10.783 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:04:10.783 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:04:10.785 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:04:10.801 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:04:10.801 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:04:12.829 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:04:12.832 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:04:12.856 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:04:12.879 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:04:12.884 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:04:12.897 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:04:12.905 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:04:12.925 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:04:12.925 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:04:22.929 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:04:22.930 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:04:22.931 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:04:22.942 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:04:22.943 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:04:24.963 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:04:24.965 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:04:24.983 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:04:25.005 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:04:25.008 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:04:25.020 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:04:25.027 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:04:25.049 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:04:25.049 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:04:35.059 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:04:35.060 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:04:35.061 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:04:35.081 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:04:35.081 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:04:37.105 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:04:37.106 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:04:37.130 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:04:37.155 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:04:37.158 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:04:37.168 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:04:37.176 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:04:37.196 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:04:37.196 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:04:47.199 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:04:47.199 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:04:47.200 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:04:47.211 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:04:47.211 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:04:49.241 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:04:49.243 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:04:49.261 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:04:49.279 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:04:49.283 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:04:49.294 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:04:49.302 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:04:49.320 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:04:49.320 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:04:59.329 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:04:59.330 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:04:59.331 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:04:59.348 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:04:59.348 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:05:01.400 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:05:01.401 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:05:01.424 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:05:01.445 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:05:01.448 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:05:01.459 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:05:01.466 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:05:01.489 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:05:01.489 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:05:11.497 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:05:11.497 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:05:11.498 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:05:11.516 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:05:11.516 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:05:13.565 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:05:13.566 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:05:13.592 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:05:13.614 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:05:13.617 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:05:13.628 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:05:13.635 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:05:13.662 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:05:13.662 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:05:23.681 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:05:23.682 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:05:23.683 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:05:23.701 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:05:23.701 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:05:25.736 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:05:25.738 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:05:25.762 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:05:25.784 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:05:25.787 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:05:25.799 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:05:25.807 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:05:25.829 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:05:25.829 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:05:35.839 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:05:35.839 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:05:35.842 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:05:35.853 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:05:35.853 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:05:37.883 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:05:37.885 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:05:37.908 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:05:37.929 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:05:37.932 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:05:37.944 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:05:37.952 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:05:37.970 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:05:37.970 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:05:47.992 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:05:47.992 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:05:47.995 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:05:48.007 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:05:48.007 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:05:50.066 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:05:50.068 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:05:50.094 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:05:50.118 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:05:50.122 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:05:50.133 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:05:50.141 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:05:50.166 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:05:50.166 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:06:00.169 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:06:00.170 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:06:00.171 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:06:00.188 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:06:00.188 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:06:02.196 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:06:02.198 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:06:02.216 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:06:02.236 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:06:02.239 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:06:02.251 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:06:02.259 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:06:02.285 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:06:02.286 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:06:12.292 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:06:12.292 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:06:12.294 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:06:12.312 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:06:12.313 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:06:14.352 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:06:14.354 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:06:14.374 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:06:14.399 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:06:14.402 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:06:14.415 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:06:14.423 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:06:14.443 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:06:14.443 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:06:24.450 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:06:24.451 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:06:24.452 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:06:24.468 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:06:24.468 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:06:26.482 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:06:26.484 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:06:26.507 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:06:26.526 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:06:26.529 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:06:26.540 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:06:26.548 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:06:26.566 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:06:26.566 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:06:36.569 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:06:36.570 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:06:36.572 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:06:36.586 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:06:36.586 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:06:38.617 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:06:38.619 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:06:38.646 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:06:38.673 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:06:38.676 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:06:38.688 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:06:38.696 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:06:38.724 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:06:38.724 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:06:48.732 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:06:48.733 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:06:48.734 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:06:48.750 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:06:48.751 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:06:50.763 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:06:50.765 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:06:50.784 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:06:50.803 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:06:50.806 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:06:50.819 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:06:50.827 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:06:50.842 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:06:50.843 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:07:00.846 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:07:00.846 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:07:00.847 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:07:00.858 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:07:00.858 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:07:02.871 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:07:02.873 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:07:02.892 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:07:02.911 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:07:02.914 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:07:02.924 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:07:02.932 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:07:02.948 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:07:02.949 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:07:12.960 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:07:12.960 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:07:12.961 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:07:12.972 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:07:12.973 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:07:14.996 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:07:14.998 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:07:15.019 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:07:15.038 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:07:15.042 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:07:15.054 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:07:15.063 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:07:15.081 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:07:15.081 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:07:25.095 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:07:25.096 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:07:25.097 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:07:25.129 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:07:25.129 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:07:27.170 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:07:27.172 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:07:27.189 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:07:27.209 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:07:27.213 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:07:27.224 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:07:27.233 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:07:27.255 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:07:27.255 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:07:37.260 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:07:37.261 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:07:37.262 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:07:37.274 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:07:37.274 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:07:39.303 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:07:39.305 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:07:39.330 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:07:39.355 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:07:39.358 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:07:39.370 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:07:39.377 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:07:39.398 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:07:39.398 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:07:49.399 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:07:49.400 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:07:49.401 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:07:49.418 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:07:49.418 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:07:51.455 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:07:51.457 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:07:51.483 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:07:51.502 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:07:51.505 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:07:51.518 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:07:51.526 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:07:51.546 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:07:51.546 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:08:01.559 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:08:01.559 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:08:01.561 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:08:01.585 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:08:01.585 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:08:03.593 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:08:03.596 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:08:03.622 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:08:03.646 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:08:03.650 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:08:03.662 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:08:03.670 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:08:03.690 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:08:03.690 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:08:13.700 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:08:13.700 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:08:13.701 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:08:13.720 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:08:13.720 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:08:15.731 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:08:15.732 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:08:15.759 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:08:15.782 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:08:15.785 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:08:15.797 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:08:15.805 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:08:15.829 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:08:15.829 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:08:25.845 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:08:25.846 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:08:25.847 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:08:25.864 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:08:25.864 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:08:27.901 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:08:27.902 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:08:27.926 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:08:27.946 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:08:27.949 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:08:27.961 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:08:27.968 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:08:27.989 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:08:27.989 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:08:38.003 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:08:38.004 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:08:38.005 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:08:38.018 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:08:38.018 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:08:40.038 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:08:40.040 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:08:40.060 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:08:40.084 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:08:40.087 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:08:40.100 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:08:40.107 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:08:40.127 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:08:40.127 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:08:50.142 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:08:50.142 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:08:50.144 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:08:50.156 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:08:50.156 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:08:52.174 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:08:52.176 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:08:52.202 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:08:52.226 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:08:52.229 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:08:52.242 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:08:52.249 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:08:52.268 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:08:52.268 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:09:02.291 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:09:02.292 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:09:02.295 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:09:02.314 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:09:02.314 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:09:04.329 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:09:04.331 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:09:04.359 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:09:04.400 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:09:04.403 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:09:04.416 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:09:04.424 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:09:04.446 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:09:04.446 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:09:14.459 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:09:14.460 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:09:14.461 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:09:14.473 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:09:14.473 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:09:16.486 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:09:16.488 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:09:16.514 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:09:16.535 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:09:16.538 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:09:16.550 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:09:16.557 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:09:16.576 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:09:16.576 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:09:26.587 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:09:26.587 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:09:26.589 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:09:26.605 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:09:26.605 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:09:28.648 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:09:28.650 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:09:28.675 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:09:28.695 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:09:28.698 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:09:28.708 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:09:28.715 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:09:28.738 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:09:28.738 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:09:38.752 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:09:38.752 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:09:38.753 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:09:38.770 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:09:38.770 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:09:40.819 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:09:40.821 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:09:40.839 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:09:40.857 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:09:40.862 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:09:40.874 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:09:40.888 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:09:40.909 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:09:40.909 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:09:50.921 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:09:50.922 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:09:50.923 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:09:50.934 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:09:50.934 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:09:52.985 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:09:52.987 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:09:53.007 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:09:53.024 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:09:53.027 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:09:53.038 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:09:53.045 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:09:53.062 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:09:53.062 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:10:03.068 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:10:03.068 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:10:03.070 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:10:03.082 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:10:03.082 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:10:05.097 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:10:05.099 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:10:05.123 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:10:05.140 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:10:05.143 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:10:05.155 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:10:05.163 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:10:05.180 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:10:05.181 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:10:15.191 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:10:15.192 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:10:15.194 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:10:15.213 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:10:15.213 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:10:17.234 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:10:17.236 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:10:17.261 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:10:17.278 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:10:17.282 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:10:17.292 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:10:17.301 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:10:17.317 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:10:17.317 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:10:27.324 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:10:27.324 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:10:27.326 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:10:27.344 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:10:27.344 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:10:29.369 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:10:29.371 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:10:29.390 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:10:29.411 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:10:29.413 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:10:29.424 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:10:29.432 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:10:29.455 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:10:29.455 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:10:39.475 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:10:39.476 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:10:39.478 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:10:39.492 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:10:39.492 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:10:41.529 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:10:41.532 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:10:41.556 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:10:41.581 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:10:41.584 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:10:41.597 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:10:41.604 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:10:41.625 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:10:41.625 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:10:51.635 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:10:51.635 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:10:51.637 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:10:51.649 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:10:51.649 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:10:53.678 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:10:53.679 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:10:53.697 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:10:53.720 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:10:53.723 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:10:53.735 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:10:53.743 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:10:53.768 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:10:53.768 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:11:03.772 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:11:03.772 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:11:03.773 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:11:03.786 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:11:03.786 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:11:05.829 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:11:05.832 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:11:05.857 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:11:05.875 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:11:05.879 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:11:05.889 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:11:05.897 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:11:05.914 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:11:05.914 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:11:15.926 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:11:15.926 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:11:15.928 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:11:15.949 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:11:15.949 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:11:17.986 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:11:17.987 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:11:18.012 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:11:18.033 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:11:18.036 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:11:18.048 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:11:18.056 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:11:18.081 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:11:18.081 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:11:28.095 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:11:28.095 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:11:28.097 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:11:28.115 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:11:28.115 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:11:30.134 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:11:30.136 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:11:30.156 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:11:30.179 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:11:30.183 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:11:30.195 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:11:30.202 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:11:30.226 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:11:30.226 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:11:40.235 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:11:40.236 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:11:40.237 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:11:40.252 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:11:40.252 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:11:42.284 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:11:42.286 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:11:42.311 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:11:42.334 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:11:42.337 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:11:42.349 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:11:42.357 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:11:42.379 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:11:42.379 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:11:52.393 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:11:52.394 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:11:52.395 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:11:52.413 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:11:52.413 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:11:54.447 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:11:54.449 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:11:54.475 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:11:54.497 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:11:54.500 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:11:54.511 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:11:54.519 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:11:54.542 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:11:54.542 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:12:04.545 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:12:04.545 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:12:04.546 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:12:04.580 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:12:04.580 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:12:06.619 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:12:06.620 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:12:06.639 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:12:06.659 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:12:06.662 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:12:06.677 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:12:06.685 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:12:06.707 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:12:06.707 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:12:16.718 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:12:16.719 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:12:16.720 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:12:16.738 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:12:16.738 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:12:18.760 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:12:18.761 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:12:18.787 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:12:18.811 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:12:18.814 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:12:18.826 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:12:18.834 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:12:18.858 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:12:18.858 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:12:28.858 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:12:28.859 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:12:28.861 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:12:28.874 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:12:28.874 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:12:30.911 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:12:30.912 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:12:30.938 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:12:30.958 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:12:30.962 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:12:30.974 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:12:30.983 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:12:31.001 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:12:31.001 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:12:41.018 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:12:41.019 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:12:41.020 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:12:41.038 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:12:41.038 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:12:43.058 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:12:43.060 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:12:43.081 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:12:43.100 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:12:43.103 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:12:43.115 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:12:43.122 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:12:43.141 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:12:43.141 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:12:53.142 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:12:53.143 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:12:53.144 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:12:53.156 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:12:53.156 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:12:55.184 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:12:55.186 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:12:55.211 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:12:55.235 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:12:55.239 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:12:55.253 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:12:55.260 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:12:55.284 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:12:55.284 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:13:05.312 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:13:05.313 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:13:05.316 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:13:05.335 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:13:05.335 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:13:07.363 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:13:07.365 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:13:07.389 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:13:07.414 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:13:07.417 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:13:07.430 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:13:07.437 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:13:07.462 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:13:07.462 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:13:17.477 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:13:17.478 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:13:17.479 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:13:17.496 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:13:17.496 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:13:19.534 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:13:19.536 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:13:19.561 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:13:19.586 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:13:19.589 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:13:19.601 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:13:19.607 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:13:19.631 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:13:19.631 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:13:29.643 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:13:29.643 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:13:29.645 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:13:29.656 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:13:29.656 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:13:31.702 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:13:31.704 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:13:31.726 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:13:31.749 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:13:31.753 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:13:31.766 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:13:31.775 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:13:31.796 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:13:31.796 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:13:41.810 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:13:41.810 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:13:41.811 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:13:41.829 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:13:41.829 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:13:43.872 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:13:43.874 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:13:43.899 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:13:43.927 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:13:43.930 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:13:43.943 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:13:43.950 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:13:43.975 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:13:43.975 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:13:53.975 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:13:53.976 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:13:53.977 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:13:53.988 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:13:53.988 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:13:56.024 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:13:56.026 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:13:56.052 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:13:56.081 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:13:56.084 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:13:56.095 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:13:56.102 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:13:56.126 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:13:56.126 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:14:06.146 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:14:06.147 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:14:06.148 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:14:06.161 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:14:06.161 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:14:08.188 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:14:08.189 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:14:08.214 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:14:08.237 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:14:08.240 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:14:08.253 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:14:08.262 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:14:08.286 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:14:08.287 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:14:18.296 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:14:18.297 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:14:18.298 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:14:18.314 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:14:18.314 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:14:20.351 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:14:20.352 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:14:20.377 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:14:20.400 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:14:20.403 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:14:20.415 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:14:20.422 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:14:20.448 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:14:20.448 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:14:30.457 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:14:30.458 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:14:30.459 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:14:30.477 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:14:30.477 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:14:32.521 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:14:32.522 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:14:32.545 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:14:32.569 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:14:32.573 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:14:32.585 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:14:32.592 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:14:32.615 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:14:32.615 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:14:42.626 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:14:42.626 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:14:42.627 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:14:42.646 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:14:42.646 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:14:44.671 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:14:44.672 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:14:44.696 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:14:44.718 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:14:44.721 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:14:44.734 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:14:44.741 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:14:44.764 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:14:44.764 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:14:54.776 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:14:54.776 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:14:54.777 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:14:54.795 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:14:54.796 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:14:56.830 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:14:56.832 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:14:56.857 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:14:56.881 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:14:56.884 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:14:56.897 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:14:56.904 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:14:56.927 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:14:56.927 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:15:06.942 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:15:06.942 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:15:06.943 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:15:06.974 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:15:06.974 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:15:09.009 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:15:09.011 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:15:09.036 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:15:09.055 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:15:09.059 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:15:09.071 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:15:09.080 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:15:09.098 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:15:09.098 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:15:19.106 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:15:19.107 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:15:19.108 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:15:19.126 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:15:19.127 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:15:21.161 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:15:21.162 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:15:21.182 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:15:21.202 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:15:21.206 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:15:21.217 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:15:21.224 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:15:21.242 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:15:21.242 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:15:31.250 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:15:31.250 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:15:31.252 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:15:31.269 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:15:31.269 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:15:33.310 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:15:33.312 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:15:33.338 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:15:33.359 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:15:33.362 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:15:33.373 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:15:33.380 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:15:33.400 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:15:33.400 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:15:43.415 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:15:43.415 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:15:43.417 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:15:43.450 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:15:43.450 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:15:45.473 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:15:45.475 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:15:45.493 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:15:45.513 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:15:45.516 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:15:45.526 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:15:45.534 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:15:45.554 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:15:45.554 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:15:55.566 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:15:55.567 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:15:55.568 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:15:55.583 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:15:55.583 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:15:57.624 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:15:57.627 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:15:57.653 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:15:57.673 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:15:57.681 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:15:57.692 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:15:57.700 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:15:57.717 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:15:57.717 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:16:07.734 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:16:07.734 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:16:07.736 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:16:07.748 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:16:07.748 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:16:09.765 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:16:09.767 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:16:09.792 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:16:09.813 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:16:09.816 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:16:09.829 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:16:09.838 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:16:09.855 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:16:09.855 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:16:19.878 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:16:19.879 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:16:19.880 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:16:19.896 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:16:19.896 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:16:21.937 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:16:21.939 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:16:21.964 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:16:21.986 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:16:21.989 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:16:22.001 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:16:22.008 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:16:22.032 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:16:22.032 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:16:32.041 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:16:32.042 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:16:32.043 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:16:32.055 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:16:32.055 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:16:34.080 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:16:34.082 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:16:34.108 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:16:34.129 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:16:34.132 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:16:34.143 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:16:34.151 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:16:34.168 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:16:34.168 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:16:44.193 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:16:44.194 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:16:44.195 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:16:44.213 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:16:44.213 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:16:46.255 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:16:46.256 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:16:46.281 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:16:46.304 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:16:46.307 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:16:46.318 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:16:46.325 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:16:46.346 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:16:46.346 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:16:56.351 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:16:56.352 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:16:56.353 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:16:56.370 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:16:56.370 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:16:58.434 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:16:58.435 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:16:58.458 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:16:58.478 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:16:58.484 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:16:58.494 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:16:58.502 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:16:58.518 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:16:58.518 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:17:08.526 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:17:08.527 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:17:08.528 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:17:08.545 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:17:08.545 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:17:10.576 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:17:10.577 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:17:10.595 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:17:10.612 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:17:10.615 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:17:10.626 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:17:10.634 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:17:10.652 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:17:10.652 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:17:20.658 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:17:20.659 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:17:20.661 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:17:20.679 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:17:20.679 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:17:22.712 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:17:22.713 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:17:22.733 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:17:22.756 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:17:22.760 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:17:22.771 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:17:22.779 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:17:22.802 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:17:22.802 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:17:32.805 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:17:32.805 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:17:32.806 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:17:32.824 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:17:32.824 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:17:34.844 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:17:34.846 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:17:34.871 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:17:34.894 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:17:34.898 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:17:34.909 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:17:34.917 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:17:34.936 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:17:34.936 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:17:44.946 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:17:44.947 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:17:44.948 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:17:44.965 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:17:44.965 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:17:46.998 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:17:46.999 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:17:47.017 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:17:47.043 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:17:47.045 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:17:47.062 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:17:47.069 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:17:47.090 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:17:47.091 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:17:57.097 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:17:57.097 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:17:57.098 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:17:57.115 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:17:57.115 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:17:59.182 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:17:59.184 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:17:59.207 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:17:59.232 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:17:59.235 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:17:59.247 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:17:59.255 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:17:59.276 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:17:59.276 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:18:09.282 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:18:09.282 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:18:09.283 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:18:09.301 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:18:09.301 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:18:11.358 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:18:11.360 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:18:11.383 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:18:11.405 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:18:11.408 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:18:11.419 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:18:11.426 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:18:11.449 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:18:11.449 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:18:21.457 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:18:21.458 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:18:21.460 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:18:21.480 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:18:21.480 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:18:23.511 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:18:23.513 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:18:23.539 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:18:23.561 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:18:23.564 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:18:23.578 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:18:23.589 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:18:23.613 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:18:23.613 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:18:33.614 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:18:33.615 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:18:33.616 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:18:33.635 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:18:33.635 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:18:35.697 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:18:35.699 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:18:35.723 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:18:35.745 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:18:35.748 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:18:35.759 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:18:35.766 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:18:35.788 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:18:35.788 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:18:45.792 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:18:45.793 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:18:45.795 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:18:45.814 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:18:45.814 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:18:47.829 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:18:47.830 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:18:47.853 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:18:47.872 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:18:47.876 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:18:47.886 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:18:47.894 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:18:47.912 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:18:47.912 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:18:51.939 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/swagger/v1/swagger.json  
2024-01-23 10:18:52.003 +08:00 [INF] Request finished in 64.353ms 200 application/json; charset=utf-8
2024-01-23 10:18:54.038 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/swagger/v2/swagger.json  
2024-01-23 10:18:54.038 +08:00 [INF] Request finished in 0.6852ms 200 application/json; charset=utf-8
2024-01-23 10:18:57.924 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:18:57.925 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:18:57.926 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:18:57.940 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:18:57.940 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:18:59.978 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:18:59.980 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:19:00.004 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:19:00.026 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:19:00.030 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:19:00.043 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:19:00.051 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:19:00.072 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:19:00.072 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:19:10.077 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:19:10.078 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:19:10.079 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:19:10.096 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:19:10.096 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:19:12.148 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:19:12.150 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:19:12.173 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:19:12.190 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:19:12.193 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:19:12.203 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:19:12.212 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:19:12.229 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:19:12.229 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:19:22.238 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:19:22.239 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:19:22.240 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:19:22.256 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:19:22.256 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:19:24.294 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:19:24.295 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:19:24.321 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:19:24.338 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:19:24.343 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:19:24.354 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:19:24.363 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:19:24.381 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:19:24.381 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:19:34.386 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:19:34.386 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:19:34.388 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:19:34.399 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:19:34.399 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:19:36.425 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:19:36.428 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:19:36.448 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:19:36.467 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:19:36.471 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:19:36.484 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:19:36.495 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:19:36.516 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:19:36.516 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:19:46.524 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:19:46.524 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:19:46.525 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:19:46.536 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:19:46.537 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:19:48.545 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:19:48.547 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:19:48.570 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:19:48.596 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:19:48.600 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:19:48.611 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:19:48.620 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:19:48.640 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:19:48.640 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:19:58.652 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:19:58.652 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:19:58.654 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:19:58.672 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:19:58.672 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:20:00.699 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:20:00.701 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:20:00.722 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:20:00.748 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:20:00.751 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:20:00.767 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:20:00.775 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:20:00.804 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:20:00.804 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:20:08.554 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/api/v2/users  
2024-01-23 10:20:08.555 +08:00 [INF] Authorization failed.
2024-01-23 10:20:08.555 +08:00 [INF] AuthenticationScheme: Bearer was challenged.
2024-01-23 10:20:08.555 +08:00 [INF] Request finished in 1.342ms 401 
2024-01-23 10:20:10.806 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:20:10.806 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:20:10.808 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:20:10.823 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:20:10.824 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:20:12.866 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:20:12.868 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:20:12.890 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:20:12.918 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:20:12.922 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:20:12.937 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:20:12.946 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:20:12.973 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:20:12.973 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:20:22.973 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:20:22.974 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:20:22.975 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:20:22.987 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:20:22.987 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:20:25.004 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:20:25.006 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:20:25.033 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:20:25.060 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:20:25.064 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:20:25.077 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:20:25.087 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:20:25.109 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:20:25.109 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:20:35.111 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:20:35.112 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:20:35.113 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:20:35.127 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:20:35.127 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:20:37.159 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:20:37.161 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:20:37.182 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:20:37.205 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:20:37.207 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:20:37.218 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:20:37.226 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:20:37.248 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:20:37.249 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:20:47.253 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:20:47.253 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:20:47.255 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:20:47.266 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:20:47.266 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:20:49.319 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:20:49.320 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:20:49.339 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:20:49.359 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:20:49.362 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:20:49.372 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:20:49.380 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:20:49.400 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:20:49.400 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:20:59.399 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:20:59.399 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:20:59.401 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:20:59.413 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:20:59.413 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:21:01.447 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:21:01.450 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:21:01.471 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:21:01.521 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:21:01.531 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:21:01.543 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:21:01.554 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:21:01.572 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:21:01.573 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:21:11.573 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:21:11.573 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:21:11.574 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:21:11.586 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:21:11.586 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:21:13.595 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:21:13.598 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:21:13.622 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:21:13.642 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:21:13.646 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:21:13.657 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:21:13.668 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:21:13.692 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:21:13.692 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:21:23.709 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:21:23.710 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:21:23.711 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:21:23.723 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:21:23.723 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:21:25.773 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:21:25.775 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:21:25.794 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:21:25.814 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:21:25.817 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:21:25.828 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:21:25.835 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:21:25.853 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:21:25.853 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:21:35.861 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:21:35.862 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:21:35.863 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:21:35.879 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:21:35.879 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:21:37.908 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:21:37.910 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:21:37.929 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:21:37.947 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:21:37.950 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:21:37.961 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:21:37.968 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:21:37.987 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:21:37.987 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:21:48.005 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:21:48.006 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:21:48.007 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:21:48.019 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:21:48.019 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:21:50.067 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:21:50.070 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:21:50.091 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:21:50.112 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:21:50.116 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:21:50.128 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:21:50.137 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:21:50.156 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:21:50.156 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:22:00.169 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:22:00.169 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:22:00.170 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:22:00.187 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:22:00.187 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:22:02.209 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:22:02.211 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:22:02.234 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:22:02.258 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:22:02.261 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:22:02.273 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:22:02.280 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:22:02.302 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:22:02.302 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:22:12.303 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:22:12.303 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:22:12.305 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:22:12.321 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:22:12.322 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:22:14.363 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:22:14.364 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:22:14.399 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:22:14.417 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:22:14.420 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:22:14.431 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:22:14.438 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:22:14.456 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:22:14.456 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:22:24.464 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:22:24.464 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:22:24.465 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:22:24.481 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:22:24.481 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:22:26.504 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:22:26.506 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:22:26.531 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:22:26.554 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:22:26.557 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:22:26.570 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:22:26.577 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:22:26.598 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:22:26.598 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:22:36.600 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:22:36.600 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:22:36.602 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:22:36.614 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:22:36.614 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:22:38.654 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:22:38.656 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:22:38.677 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:22:38.695 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:22:38.698 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:22:38.710 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:22:38.718 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:22:38.738 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:22:38.738 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:22:48.742 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:22:48.742 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:22:48.743 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:22:48.758 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:22:48.758 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:22:50.791 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:22:50.794 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:22:50.814 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:22:50.830 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:22:50.833 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:22:50.844 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:22:50.851 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:22:50.868 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:22:50.868 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:23:00.873 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:23:00.874 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:23:00.875 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:23:00.885 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:23:00.885 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:23:02.928 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:23:02.930 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:23:02.954 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:23:02.977 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:23:02.981 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:23:02.992 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:23:03.002 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:23:03.021 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:23:03.021 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:23:13.023 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:23:13.023 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:23:13.025 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:23:13.039 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:23:13.040 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:23:15.076 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:23:15.079 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:23:15.099 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:23:15.120 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:23:15.123 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:23:15.135 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:23:15.143 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:23:15.162 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:23:15.162 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:23:25.172 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:23:25.173 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:23:25.174 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:23:25.190 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:23:25.190 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:23:27.241 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:23:27.243 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:23:27.267 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:23:27.290 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:23:27.292 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:23:27.303 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:23:27.310 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:23:27.331 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:23:27.331 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:23:37.342 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:23:37.343 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:23:37.344 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:23:37.357 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:23:37.357 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:23:39.392 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:23:39.394 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:23:39.427 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:23:39.447 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:23:39.451 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:23:39.464 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:23:39.475 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:23:39.496 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:23:39.496 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:23:49.507 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:23:49.507 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:23:49.509 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:23:49.529 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:23:49.529 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:23:51.554 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:23:51.556 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:23:51.577 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:23:51.597 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:23:51.600 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:23:51.611 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:23:51.619 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:23:51.644 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:23:51.644 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:24:01.655 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:24:01.655 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:24:01.657 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:24:01.675 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:24:01.677 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:24:03.708 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:24:03.710 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:24:03.734 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:24:03.759 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:24:03.762 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:24:03.775 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:24:03.783 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:24:03.808 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:24:03.808 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:24:13.823 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:24:13.823 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:24:13.825 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:24:13.841 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:24:13.841 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:24:15.882 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:24:15.884 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:24:15.909 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:24:15.929 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:24:15.932 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:24:15.944 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:24:15.957 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:24:15.980 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:24:15.980 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:24:25.990 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:24:25.990 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:24:25.992 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:24:26.003 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:24:26.003 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:24:28.020 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:24:28.022 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:24:28.044 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:24:28.063 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:24:28.067 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:24:28.079 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:24:28.088 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:24:28.107 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:24:28.107 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:24:38.107 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:24:38.107 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:24:38.108 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:24:38.120 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:24:38.120 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:24:40.161 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:24:40.163 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:24:40.186 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:24:40.209 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:24:40.212 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:24:40.223 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:24:40.231 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:24:40.250 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:24:40.251 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:24:50.256 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:24:50.257 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:24:50.258 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:24:50.277 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:24:50.277 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:24:52.292 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:24:52.294 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:24:52.320 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:24:52.341 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:24:52.345 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:24:52.357 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:24:52.365 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:24:52.387 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:24:52.387 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:25:02.412 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:25:02.412 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:25:02.413 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:25:02.424 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:25:02.424 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:25:04.442 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:25:04.445 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:25:04.469 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:25:04.487 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:25:04.490 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:25:04.502 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:25:04.509 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:25:04.527 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:25:04.527 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:25:14.538 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:25:14.539 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:25:14.540 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:25:14.557 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:25:14.557 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:25:16.577 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:25:16.579 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:25:16.599 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:25:16.621 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:25:16.624 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:25:16.636 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:25:16.644 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:25:16.668 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:25:16.668 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:25:26.673 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:25:26.674 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:25:26.675 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:25:26.693 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:25:26.693 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:25:28.713 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:25:28.715 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:25:28.739 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:25:28.759 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:25:28.762 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:25:28.775 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:25:28.783 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:25:28.807 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:25:28.808 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:25:38.820 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:25:38.820 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:25:38.821 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:25:38.839 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:25:38.839 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:25:40.883 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:25:40.885 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:25:40.911 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:25:40.933 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:25:40.935 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:25:40.946 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:25:40.953 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:25:40.971 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:25:40.971 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:25:50.983 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:25:50.984 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:25:50.985 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:25:51.001 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:25:51.001 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:25:53.037 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:25:53.038 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:25:53.063 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:25:53.082 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:25:53.085 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:25:53.096 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:25:53.103 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:25:53.124 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:25:53.124 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:26:03.133 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:26:03.134 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:26:03.139 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:26:03.157 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:26:03.157 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:26:05.177 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:26:05.179 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:26:05.200 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:26:05.222 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:26:05.225 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:26:05.236 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:26:05.245 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:26:05.266 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:26:05.266 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:26:15.292 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:26:15.292 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:26:15.294 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:26:15.311 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:26:15.311 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:26:17.319 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:26:17.321 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:26:17.343 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:26:17.361 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:26:17.364 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:26:17.374 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:26:17.382 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:26:17.400 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:26:17.400 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:26:27.409 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:26:27.409 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:26:27.410 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:26:27.431 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:26:27.431 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:26:29.444 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:26:29.446 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:26:29.471 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:26:29.493 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:26:29.497 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:26:29.510 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:26:29.519 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:26:29.542 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:26:29.542 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:26:39.556 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:26:39.556 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:26:39.557 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:26:39.570 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:26:39.570 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:26:41.597 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:26:41.598 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:26:41.621 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:26:41.646 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:26:41.649 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:26:41.661 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:26:41.668 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:26:41.690 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:26:41.690 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:26:51.704 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:26:51.704 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:26:51.706 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:26:51.723 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:26:51.723 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:26:53.755 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:26:53.757 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:26:53.775 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:26:53.800 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:26:53.803 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:26:53.815 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:26:53.823 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:26:53.847 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:26:53.847 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:27:03.856 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:27:03.857 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:27:03.858 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:27:03.870 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:27:03.870 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:27:05.899 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:27:05.901 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:27:05.927 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:27:05.950 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:27:05.953 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:27:05.965 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:27:05.975 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:27:05.994 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:27:05.994 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:27:16.011 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:27:16.011 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:27:16.012 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:27:16.023 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:27:16.023 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:27:18.046 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:27:18.048 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:27:18.067 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:27:18.091 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:27:18.095 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:27:18.107 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:27:18.115 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:27:18.136 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:27:18.136 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:27:28.137 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:27:28.137 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:27:28.138 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:27:28.157 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:27:28.157 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:27:30.187 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:27:30.188 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:27:30.206 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:27:30.224 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:27:30.228 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:27:30.240 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:27:30.249 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:27:30.270 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:27:30.271 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:27:40.271 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:27:40.272 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:27:40.273 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:27:40.292 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:27:40.292 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:27:42.326 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:27:42.328 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:27:42.351 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:27:42.374 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:27:42.378 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:27:42.390 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:27:42.397 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:27:42.420 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:27:42.420 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:27:52.424 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:27:52.424 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:27:52.427 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:27:52.446 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:27:52.446 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:27:54.468 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:27:54.470 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:27:54.488 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:27:54.510 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:27:54.513 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:27:54.525 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:27:54.532 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:27:54.554 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:27:54.554 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:28:04.563 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:28:04.563 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:28:04.564 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:28:04.582 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:28:04.582 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:28:06.606 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:28:06.608 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:28:06.631 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:28:06.654 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:28:06.657 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:28:06.668 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:28:06.675 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:28:06.699 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:28:06.699 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:28:16.702 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:28:16.703 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:28:16.704 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:28:16.723 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:28:16.723 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:28:18.764 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:28:18.766 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:28:18.786 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:28:18.810 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:28:18.813 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:28:18.826 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:28:18.833 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:28:18.857 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:28:18.857 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:28:28.861 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:28:28.861 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:28:28.862 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:28:28.879 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:28:28.879 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:28:30.944 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:28:30.946 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:28:30.965 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:28:30.982 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:28:30.985 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:28:30.996 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:28:31.004 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:28:31.020 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:28:31.020 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:28:41.025 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:28:41.026 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:28:41.027 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:28:41.044 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:28:41.044 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:28:43.076 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:28:43.078 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:28:43.095 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:28:43.118 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:28:43.120 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:28:43.133 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:28:43.140 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:28:43.160 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:28:43.160 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:28:53.173 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:28:53.174 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:28:53.176 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:28:53.188 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:28:53.188 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:28:55.237 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:28:55.239 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:28:55.262 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:28:55.284 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:28:55.287 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:28:55.297 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:28:55.304 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:28:55.322 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:28:55.322 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:29:05.323 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:29:05.324 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:29:05.326 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:29:05.338 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:29:05.338 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:29:07.377 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:29:07.380 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:29:07.403 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:29:07.421 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:29:07.424 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:29:07.435 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:29:07.443 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:29:07.460 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:29:07.460 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:29:17.474 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:29:17.475 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:29:17.476 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:29:17.488 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:29:17.488 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:29:19.512 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:29:19.513 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:29:19.536 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:29:19.560 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:29:19.563 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:29:19.578 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:29:19.585 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:29:19.610 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:29:19.610 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:29:29.614 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:29:29.615 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:29:29.616 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:29:29.629 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:29:29.629 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:29:31.659 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:29:31.661 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:29:31.685 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:29:31.707 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:29:31.710 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:29:31.720 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:29:31.727 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:29:31.751 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:29:31.751 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:29:41.759 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:29:41.759 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:29:41.761 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:29:41.777 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:29:41.777 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:29:43.812 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:29:43.814 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:29:43.841 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:29:43.866 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:29:43.869 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:29:43.881 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:29:43.888 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:29:43.914 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:29:43.914 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:29:53.937 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:29:53.937 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:29:53.939 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:29:53.956 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:29:53.956 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:29:56.004 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:29:56.005 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:29:56.029 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:29:56.050 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:29:56.053 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:29:56.065 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:29:56.072 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:29:56.098 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:29:56.098 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:30:06.107 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:30:06.108 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:30:06.110 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:30:06.129 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:30:06.129 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:30:08.161 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:30:08.163 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:30:08.186 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:30:08.212 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:30:08.215 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:30:08.228 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:30:08.236 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:30:08.262 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:30:08.262 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:30:18.271 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:30:18.272 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:30:18.274 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:30:18.293 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:30:18.293 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:30:20.306 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:30:20.308 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:30:20.328 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:30:20.347 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:30:20.350 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:30:20.361 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:30:20.368 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:30:20.387 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:30:20.387 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:30:30.391 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:30:30.392 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:30:30.393 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:30:30.412 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:30:30.412 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:30:32.451 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:30:32.453 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:30:32.472 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:30:32.497 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:30:32.500 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:30:32.511 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:30:32.519 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:30:32.543 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:30:32.543 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:30:42.557 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:30:42.557 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:30:42.559 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:30:42.572 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:30:42.572 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:30:44.595 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:30:44.597 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:30:44.620 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:30:44.640 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:30:44.644 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:30:44.655 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:30:44.667 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:30:44.686 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:30:44.686 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:30:54.688 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:30:54.688 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:30:54.689 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:30:54.701 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:30:54.701 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:30:56.744 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:30:56.746 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:30:56.768 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:30:56.789 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:30:56.794 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:30:56.808 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:30:56.817 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:30:56.835 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:30:56.835 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:31:06.840 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:31:06.840 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:31:06.843 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:31:06.856 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:31:06.856 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:31:08.878 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:31:08.882 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:31:08.912 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:31:08.935 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:31:08.940 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:31:08.953 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:31:08.968 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:31:08.987 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:31:08.987 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:31:18.992 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:31:18.993 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:31:18.994 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:31:19.012 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:31:19.012 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:31:21.028 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:31:21.030 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:31:21.055 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:31:21.073 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:31:21.077 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:31:21.089 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:31:21.097 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:31:21.116 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:31:21.116 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:31:31.123 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:31:31.123 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:31:31.124 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:31:31.166 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:31:31.166 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:31:33.208 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:31:33.209 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:31:33.235 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:31:33.254 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:31:33.257 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:31:33.268 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:31:33.275 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:31:33.296 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:31:33.296 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:31:43.308 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:31:43.308 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:31:43.310 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:31:43.321 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:31:43.321 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:31:45.351 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:31:45.353 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:31:45.376 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:31:45.398 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:31:45.401 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:31:45.414 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:31:45.421 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:31:45.443 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:31:45.444 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:31:55.457 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:31:55.457 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:31:55.458 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:31:55.482 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:31:55.482 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:31:57.507 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:31:57.509 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:31:57.532 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:31:57.551 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:31:57.554 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:31:57.565 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:31:57.572 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:31:57.593 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:31:57.593 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:32:07.610 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:32:07.611 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:32:07.611 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:32:07.627 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:32:07.627 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:32:09.659 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:32:09.660 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:32:09.701 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:32:09.719 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:32:09.723 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:32:09.736 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:32:09.749 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:32:09.768 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:32:09.768 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:32:19.783 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:32:19.784 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:32:19.785 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:32:19.803 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:32:19.803 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:32:21.830 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:32:21.832 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:32:21.859 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:32:21.876 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:32:21.880 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:32:21.891 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:32:21.899 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:32:21.917 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:32:21.918 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:32:31.926 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:32:31.927 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:32:31.932 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:32:31.965 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:32:31.965 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:32:34.027 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:5001/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:32:34.028 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:32:34.062 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:32:34.079 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:32:34.082 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:32:34.093 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:32:34.100 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:32:34.117 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:32:34.117 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:32:44.137 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:32:44.138 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:32:44.139 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:32:44.158 +08:00 [INF] Start processing HTTP request GET "https://localhost:44383/health"
2024-01-23 10:32:44.158 +08:00 [INF] Sending HTTP request GET "https://localhost:44383/health"
2024-01-23 10:32:46.165 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:44383/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:32:46.166 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:32:46.187 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:32:46.205 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:32:46.209 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:32:46.220 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:32:46.228 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:32:46.246 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:32:46.246 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:32:56.272 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:32:56.273 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:32:56.274 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:32:56.291 +08:00 [INF] Start processing HTTP request GET "https://localhost:44383/health"
2024-01-23 10:32:56.291 +08:00 [INF] Sending HTTP request GET "https://localhost:44383/health"
2024-01-23 10:32:58.308 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:44383/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:32:58.312 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:32:58.331 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:32:58.348 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:32:58.351 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:32:58.362 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:32:58.369 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:32:58.386 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:32:58.386 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:33:08.390 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:33:08.390 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:33:08.391 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:33:08.403 +08:00 [INF] Start processing HTTP request GET "https://localhost:44383/health"
2024-01-23 10:33:08.403 +08:00 [INF] Sending HTTP request GET "https://localhost:44383/health"
2024-01-23 10:33:10.437 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:44383/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:33:10.439 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:33:10.457 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:33:10.477 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:33:10.481 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:33:10.494 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:33:10.502 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:33:10.520 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:33:10.520 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:33:20.520 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:33:20.520 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:33:20.521 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:33:20.533 +08:00 [INF] Start processing HTTP request GET "https://localhost:44383/health"
2024-01-23 10:33:20.533 +08:00 [INF] Sending HTTP request GET "https://localhost:44383/health"
2024-01-23 10:33:22.543 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:44383/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:33:22.545 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:33:22.570 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:33:22.594 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:33:22.598 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:33:22.610 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:33:22.617 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:33:22.642 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:33:22.642 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:33:26.919 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/swagger/index.html?urls.primaryName=v2  
2024-01-23 10:33:26.920 +08:00 [INF] Request finished in 0.9593ms 200 text/html; charset=utf-8
2024-01-23 10:33:27.052 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/swagger/v2/swagger.json  
2024-01-23 10:33:27.053 +08:00 [INF] Request finished in 0.7642ms 200 application/json; charset=utf-8
2024-01-23 10:33:32.655 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:33:32.655 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:33:32.658 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:33:32.678 +08:00 [INF] Start processing HTTP request GET "https://localhost:44383/health"
2024-01-23 10:33:32.678 +08:00 [INF] Sending HTTP request GET "https://localhost:44383/health"
2024-01-23 10:33:34.694 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:44383/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:33:34.697 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:33:34.715 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:33:34.736 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:33:34.739 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:33:34.752 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:33:34.760 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:33:34.780 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:33:34.780 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:33:44.791 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:33:44.791 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:33:44.793 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:33:44.810 +08:00 [INF] Start processing HTTP request GET "https://localhost:44383/health"
2024-01-23 10:33:44.810 +08:00 [INF] Sending HTTP request GET "https://localhost:44383/health"
2024-01-23 10:33:46.239 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/get-token/  
2024-01-23 10:33:46.239 +08:00 [INF] Executing endpoint 'TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker)'
2024-01-23 10:33:46.240 +08:00 [INF] Route matched with {action = "GenerateToken", controller = "DummyAuth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GenerateToken(System.String, Boolean) on controller TimeTracker.Controllers.DummyAuthController (TimeTracker).
2024-01-23 10:33:46.241 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-01-23 10:33:46.242 +08:00 [INF] Executed action TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker) in 1.8038ms
2024-01-23 10:33:46.242 +08:00 [INF] Executed endpoint 'TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker)'
2024-01-23 10:33:46.242 +08:00 [INF] Request finished in 3.0027ms 200 text/plain; charset=utf-8
2024-01-23 10:33:46.830 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:44383/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:33:46.831 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:33:46.855 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:33:46.879 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:33:46.882 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:33:46.894 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:33:46.902 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:33:46.924 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:33:46.924 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:33:49.415 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/get-token/  
2024-01-23 10:33:49.415 +08:00 [INF] Executing endpoint 'TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker)'
2024-01-23 10:33:49.416 +08:00 [INF] Route matched with {action = "GenerateToken", controller = "DummyAuth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GenerateToken(System.String, Boolean) on controller TimeTracker.Controllers.DummyAuthController (TimeTracker).
2024-01-23 10:33:49.417 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-01-23 10:33:49.418 +08:00 [INF] Executed action TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker) in 1.9825ms
2024-01-23 10:33:49.418 +08:00 [INF] Executed endpoint 'TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker)'
2024-01-23 10:33:49.418 +08:00 [INF] Request finished in 3.3914ms 200 text/plain; charset=utf-8
2024-01-23 10:33:56.119 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/get-token/  
2024-01-23 10:33:56.120 +08:00 [INF] Executing endpoint 'TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker)'
2024-01-23 10:33:56.120 +08:00 [INF] Route matched with {action = "GenerateToken", controller = "DummyAuth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GenerateToken(System.String, Boolean) on controller TimeTracker.Controllers.DummyAuthController (TimeTracker).
2024-01-23 10:33:56.121 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-01-23 10:33:56.122 +08:00 [INF] Executed action TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker) in 1.4299ms
2024-01-23 10:33:56.122 +08:00 [INF] Executed endpoint 'TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker)'
2024-01-23 10:33:56.122 +08:00 [INF] Request finished in 2.4565ms 200 text/plain; charset=utf-8
2024-01-23 10:33:56.815 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/get-token/  
2024-01-23 10:33:56.815 +08:00 [INF] Executing endpoint 'TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker)'
2024-01-23 10:33:56.815 +08:00 [INF] Route matched with {action = "GenerateToken", controller = "DummyAuth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GenerateToken(System.String, Boolean) on controller TimeTracker.Controllers.DummyAuthController (TimeTracker).
2024-01-23 10:33:56.816 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-01-23 10:33:56.816 +08:00 [INF] Executed action TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker) in 1.2716ms
2024-01-23 10:33:56.817 +08:00 [INF] Executed endpoint 'TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker)'
2024-01-23 10:33:56.817 +08:00 [INF] Request finished in 2.1754ms 200 text/plain; charset=utf-8
2024-01-23 10:33:56.942 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:33:56.943 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:33:56.945 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:33:56.958 +08:00 [INF] Start processing HTTP request GET "https://localhost:44383/health"
2024-01-23 10:33:56.958 +08:00 [INF] Sending HTTP request GET "https://localhost:44383/health"
2024-01-23 10:33:58.183 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/get-token/  
2024-01-23 10:33:58.184 +08:00 [INF] Executing endpoint 'TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker)'
2024-01-23 10:33:58.184 +08:00 [INF] Route matched with {action = "GenerateToken", controller = "DummyAuth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GenerateToken(System.String, Boolean) on controller TimeTracker.Controllers.DummyAuthController (TimeTracker).
2024-01-23 10:33:58.185 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-01-23 10:33:58.186 +08:00 [INF] Executed action TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker) in 1.5542ms
2024-01-23 10:33:58.186 +08:00 [INF] Executed endpoint 'TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker)'
2024-01-23 10:33:58.186 +08:00 [INF] Request finished in 2.5839ms 200 text/plain; charset=utf-8
2024-01-23 10:33:58.783 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/get-token/  
2024-01-23 10:33:58.783 +08:00 [INF] Executing endpoint 'TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker)'
2024-01-23 10:33:58.783 +08:00 [INF] Route matched with {action = "GenerateToken", controller = "DummyAuth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GenerateToken(System.String, Boolean) on controller TimeTracker.Controllers.DummyAuthController (TimeTracker).
2024-01-23 10:33:58.784 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-01-23 10:33:58.784 +08:00 [INF] Executed action TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker) in 1.1157ms
2024-01-23 10:33:58.785 +08:00 [INF] Executed endpoint 'TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker)'
2024-01-23 10:33:58.785 +08:00 [INF] Request finished in 2.1779ms 200 text/plain; charset=utf-8
2024-01-23 10:33:58.989 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:44383/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:33:58.991 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:33:59.014 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:33:59.034 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:33:59.037 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:33:59.049 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:33:59.057 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:33:59.074 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:33:59.074 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:33:59.302 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/get-token/  
2024-01-23 10:33:59.302 +08:00 [INF] Executing endpoint 'TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker)'
2024-01-23 10:33:59.303 +08:00 [INF] Route matched with {action = "GenerateToken", controller = "DummyAuth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GenerateToken(System.String, Boolean) on controller TimeTracker.Controllers.DummyAuthController (TimeTracker).
2024-01-23 10:33:59.304 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-01-23 10:33:59.304 +08:00 [INF] Executed action TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker) in 1.1611ms
2024-01-23 10:33:59.304 +08:00 [INF] Executed endpoint 'TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker)'
2024-01-23 10:33:59.304 +08:00 [INF] Request finished in 2.1035ms 200 text/plain; charset=utf-8
2024-01-23 10:33:59.983 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/get-token/  
2024-01-23 10:33:59.983 +08:00 [INF] Executing endpoint 'TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker)'
2024-01-23 10:33:59.984 +08:00 [INF] Route matched with {action = "GenerateToken", controller = "DummyAuth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GenerateToken(System.String, Boolean) on controller TimeTracker.Controllers.DummyAuthController (TimeTracker).
2024-01-23 10:33:59.984 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-01-23 10:33:59.985 +08:00 [INF] Executed action TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker) in 0.968ms
2024-01-23 10:33:59.985 +08:00 [INF] Executed endpoint 'TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker)'
2024-01-23 10:33:59.985 +08:00 [INF] Request finished in 1.8473ms 200 text/plain; charset=utf-8
2024-01-23 10:34:09.082 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:34:09.083 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:34:09.084 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:34:09.094 +08:00 [INF] Start processing HTTP request GET "https://localhost:44383/health"
2024-01-23 10:34:09.095 +08:00 [INF] Sending HTTP request GET "https://localhost:44383/health"
2024-01-23 10:34:11.137 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:44383/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:34:11.139 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:34:11.157 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:34:11.180 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:34:11.183 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:34:11.196 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:34:11.203 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:34:11.225 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:34:11.225 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:34:21.238 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:34:21.239 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:34:21.241 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:34:21.259 +08:00 [INF] Start processing HTTP request GET "https://localhost:44383/health"
2024-01-23 10:34:21.259 +08:00 [INF] Sending HTTP request GET "https://localhost:44383/health"
2024-01-23 10:34:23.292 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:44383/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:34:23.295 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:34:23.319 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:34:23.337 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:34:23.341 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:34:23.353 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:34:23.360 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:34:23.382 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:34:23.382 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:34:33.389 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:34:33.389 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:34:33.390 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:34:33.402 +08:00 [INF] Start processing HTTP request GET "https://localhost:44383/health"
2024-01-23 10:34:33.402 +08:00 [INF] Sending HTTP request GET "https://localhost:44383/health"
2024-01-23 10:34:35.439 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:44383/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:34:35.441 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:34:35.462 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:34:35.481 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:34:35.484 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:34:35.496 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:34:35.503 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:34:35.520 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:34:35.520 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:34:45.544 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:34:45.544 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:34:45.545 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:34:45.561 +08:00 [INF] Start processing HTTP request GET "https://localhost:44383/health"
2024-01-23 10:34:45.561 +08:00 [INF] Sending HTTP request GET "https://localhost:44383/health"
2024-01-23 10:34:47.587 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:44383/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:34:47.589 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:34:47.610 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:34:47.627 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:34:47.630 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:34:47.642 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:34:47.650 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:34:47.667 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:34:47.667 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:34:57.674 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:34:57.675 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:34:57.676 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:34:57.693 +08:00 [INF] Start processing HTTP request GET "https://localhost:44383/health"
2024-01-23 10:34:57.694 +08:00 [INF] Sending HTTP request GET "https://localhost:44383/health"
2024-01-23 10:34:59.728 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:44383/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:34:59.730 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:34:59.755 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:34:59.780 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:34:59.783 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:34:59.795 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:34:59.803 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:34:59.825 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:34:59.825 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:35:09.839 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:35:09.840 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:35:09.841 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:35:09.854 +08:00 [INF] Start processing HTTP request GET "https://localhost:44383/health"
2024-01-23 10:35:09.854 +08:00 [INF] Sending HTTP request GET "https://localhost:44383/health"
2024-01-23 10:35:11.892 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:44383/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:35:11.894 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:35:11.913 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:35:11.935 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:35:11.938 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:35:11.950 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:35:11.957 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:35:11.980 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:35:11.980 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:35:21.994 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:35:21.995 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:35:21.996 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:35:22.013 +08:00 [INF] Start processing HTTP request GET "https://localhost:44383/health"
2024-01-23 10:35:22.013 +08:00 [INF] Sending HTTP request GET "https://localhost:44383/health"
2024-01-23 10:35:24.048 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:44383/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:35:24.050 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:35:24.076 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:35:24.096 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:35:24.099 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:35:24.111 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:35:24.118 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:35:24.138 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:35:24.138 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:35:28.087 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/  
2024-01-23 10:35:28.087 +08:00 [INF] Request finished in 0.6077ms 404 
2024-01-23 10:35:31.603 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/  
2024-01-23 10:35:31.604 +08:00 [INF] Request finished in 0.4239ms 404 
2024-01-23 10:35:34.144 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:35:34.145 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:35:34.145 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:35:34.158 +08:00 [INF] Start processing HTTP request GET "https://localhost:44383/health"
2024-01-23 10:35:34.158 +08:00 [INF] Sending HTTP request GET "https://localhost:44383/health"
2024-01-23 10:35:36.188 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:44383/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:35:36.190 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:35:36.265 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:35:36.287 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:35:36.291 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:35:36.304 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:35:36.312 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:35:36.330 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:35:36.330 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:35:45.231 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/  
2024-01-23 10:35:45.231 +08:00 [INF] Request finished in 0.4293ms 404 
2024-01-23 10:35:46.054 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/  
2024-01-23 10:35:46.055 +08:00 [INF] Request finished in 0.3396ms 404 
2024-01-23 10:35:46.335 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:35:46.335 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:35:46.337 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:35:46.357 +08:00 [INF] Start processing HTTP request GET "https://localhost:44383/health"
2024-01-23 10:35:46.357 +08:00 [INF] Sending HTTP request GET "https://localhost:44383/health"
2024-01-23 10:35:48.374 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:44383/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:35:48.376 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:35:48.403 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:35:48.428 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:35:48.434 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:35:48.451 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:35:48.460 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:35:48.480 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:35:48.480 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:35:58.485 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:35:58.486 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:35:58.487 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:35:58.498 +08:00 [INF] Start processing HTTP request GET "https://localhost:44383/health"
2024-01-23 10:35:58.498 +08:00 [INF] Sending HTTP request GET "https://localhost:44383/health"
2024-01-23 10:36:00.506 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:44383/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:36:00.508 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:36:00.537 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:36:00.558 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:36:00.562 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:36:00.575 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:36:00.584 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:36:00.603 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:36:00.603 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:36:10.603 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:36:10.604 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:36:10.605 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:36:10.617 +08:00 [INF] Start processing HTTP request GET "https://localhost:44383/health"
2024-01-23 10:36:10.617 +08:00 [INF] Sending HTTP request GET "https://localhost:44383/health"
2024-01-23 10:36:12.625 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:44383/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:36:12.628 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:36:12.651 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:36:12.676 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:36:12.682 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:36:12.701 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:36:12.725 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:36:12.748 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:36:12.749 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:36:22.771 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:36:22.771 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:36:22.773 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:36:22.785 +08:00 [INF] Start processing HTTP request GET "https://localhost:44383/health"
2024-01-23 10:36:22.785 +08:00 [INF] Sending HTTP request GET "https://localhost:44383/health"
2024-01-23 10:36:24.830 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:44383/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:36:24.832 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:36:24.853 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:36:24.873 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:36:24.876 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:36:24.889 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:36:24.898 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:36:24.916 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:36:24.917 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:36:34.920 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:36:34.920 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:36:34.922 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:36:34.935 +08:00 [INF] Start processing HTTP request GET "https://localhost:44383/health"
2024-01-23 10:36:34.935 +08:00 [INF] Sending HTTP request GET "https://localhost:44383/health"
2024-01-23 10:36:36.102 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/  
2024-01-23 10:36:36.104 +08:00 [INF] Request finished in 1.7431ms 404 
2024-01-23 10:36:36.725 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/  
2024-01-23 10:36:36.725 +08:00 [INF] Request finished in 0.6713ms 404 
2024-01-23 10:36:36.946 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:44383/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:36:36.948 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:36:36.971 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:36:36.993 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:36:36.997 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:36:37.010 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:36:37.018 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:36:37.043 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:36:37.043 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:36:37.390 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/  
2024-01-23 10:36:37.390 +08:00 [INF] Request finished in 0.337ms 404 
2024-01-23 10:36:37.679 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/  
2024-01-23 10:36:37.679 +08:00 [INF] Request finished in 0.4009ms 404 
2024-01-23 10:36:37.845 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/  
2024-01-23 10:36:37.846 +08:00 [INF] Request finished in 0.3473ms 404 
2024-01-23 10:36:38.038 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/  
2024-01-23 10:36:38.038 +08:00 [INF] Request finished in 0.3621ms 404 
2024-01-23 10:36:38.189 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/  
2024-01-23 10:36:38.189 +08:00 [INF] Request finished in 0.3294ms 404 
2024-01-23 10:36:38.342 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/  
2024-01-23 10:36:38.343 +08:00 [INF] Request finished in 0.3304ms 404 
2024-01-23 10:36:38.485 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/  
2024-01-23 10:36:38.485 +08:00 [INF] Request finished in 0.3562ms 404 
2024-01-23 10:36:38.806 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/  
2024-01-23 10:36:38.806 +08:00 [INF] Request finished in 0.3472ms 404 
2024-01-23 10:36:38.998 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/  
2024-01-23 10:36:38.998 +08:00 [INF] Request finished in 0.3886ms 404 
2024-01-23 10:36:47.056 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:36:47.056 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:36:47.057 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:36:47.089 +08:00 [INF] Start processing HTTP request GET "https://localhost:44383/health"
2024-01-23 10:36:47.090 +08:00 [INF] Sending HTTP request GET "https://localhost:44383/health"
2024-01-23 10:36:49.104 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:44383/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:36:49.107 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:36:49.150 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:36:49.168 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:36:49.172 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:36:49.184 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:36:49.192 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:36:49.210 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:36:49.210 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:36:59.223 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:36:59.223 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:36:59.224 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:36:59.237 +08:00 [INF] Start processing HTTP request GET "https://localhost:44383/health"
2024-01-23 10:36:59.237 +08:00 [INF] Sending HTTP request GET "https://localhost:44383/health"
2024-01-23 10:37:01.258 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:44383/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:37:01.273 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:37:01.380 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:37:01.399 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:37:01.404 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:37:01.416 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:37:01.426 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:37:01.444 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:37:01.444 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:37:08.886 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/get-token/  
2024-01-23 10:37:08.887 +08:00 [INF] Executing endpoint 'TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker)'
2024-01-23 10:37:08.887 +08:00 [INF] Route matched with {action = "GenerateToken", controller = "DummyAuth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GenerateToken(System.String, Boolean) on controller TimeTracker.Controllers.DummyAuthController (TimeTracker).
2024-01-23 10:37:08.888 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-01-23 10:37:08.888 +08:00 [INF] Executed action TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker) in 1.2694ms
2024-01-23 10:37:08.888 +08:00 [INF] Executed endpoint 'TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker)'
2024-01-23 10:37:08.889 +08:00 [INF] Request finished in 2.3424ms 200 text/plain; charset=utf-8
2024-01-23 10:37:10.517 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/  
2024-01-23 10:37:10.517 +08:00 [INF] Request finished in 0.3684ms 404 
2024-01-23 10:37:11.077 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/  
2024-01-23 10:37:11.078 +08:00 [INF] Request finished in 0.2043ms 404 
2024-01-23 10:37:11.456 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:37:11.457 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:37:11.458 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:37:11.471 +08:00 [INF] Start processing HTTP request GET "https://localhost:44383/health"
2024-01-23 10:37:11.471 +08:00 [INF] Sending HTTP request GET "https://localhost:44383/health"
2024-01-23 10:37:13.506 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:44383/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:37:13.510 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:37:13.538 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:37:13.560 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:37:13.563 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:37:13.576 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:37:13.585 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:37:13.604 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:37:13.604 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:37:23.620 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:37:23.621 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:37:23.622 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:37:23.640 +08:00 [INF] Start processing HTTP request GET "https://localhost:44383/health"
2024-01-23 10:37:23.640 +08:00 [INF] Sending HTTP request GET "https://localhost:44383/health"
2024-01-23 10:37:25.671 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:44383/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:37:25.673 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:37:25.698 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:37:25.716 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:37:25.719 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:37:25.731 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:37:25.743 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:37:25.761 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:37:25.762 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:37:35.772 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:37:35.772 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:37:35.774 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:37:35.795 +08:00 [INF] Start processing HTTP request GET "https://localhost:44383/health"
2024-01-23 10:37:35.795 +08:00 [INF] Sending HTTP request GET "https://localhost:44383/health"
2024-01-23 10:37:37.825 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:44383/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:37:37.828 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:37:37.851 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:37:37.872 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:37:37.876 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:37:37.889 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:37:37.899 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:37:37.919 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:37:37.919 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:37:47.925 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:37:47.926 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:37:47.927 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:37:47.973 +08:00 [INF] Start processing HTTP request GET "https://localhost:44383/health"
2024-01-23 10:37:47.973 +08:00 [INF] Sending HTTP request GET "https://localhost:44383/health"
2024-01-23 10:37:50.003 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:44383/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:37:50.004 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:37:50.025 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:37:50.043 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:37:50.046 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:37:50.059 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:37:50.068 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:37:50.085 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:37:50.085 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:38:00.103 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:38:00.104 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:38:00.105 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:38:00.119 +08:00 [INF] Start processing HTTP request GET "https://localhost:44383/health"
2024-01-23 10:38:00.119 +08:00 [INF] Sending HTTP request GET "https://localhost:44383/health"
2024-01-23 10:38:02.134 +08:00 [ERR] GetHealthReport threw an exception when trying to get report from https://localhost:44383/health configured with name HTTP-Api-Basic.
System.Net.Http.HttpRequestException: No connection could be made because the target machine actively refused it.
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at HealthChecks.UI.Core.HostedService.HealthCheckReportCollector.GetHealthReport(HealthCheckConfiguration configuration)
2024-01-23 10:38:02.136 +08:00 [INF] Executing DbCommand [Parameters=[@__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."HealthCheckName", "t"."IsUpAndRunning", "t"."LastNotified"
FROM (
    SELECT "f"."Id", "f"."HealthCheckName", "f"."IsUpAndRunning", "f"."LastNotified"
    FROM "Failures" AS "f"
    WHERE 0
    ORDER BY "f"."LastNotified" DESC
    LIMIT @__p_1
) AS "t"
ORDER BY "t"."LastNotified" DESC
LIMIT 2
2024-01-23 10:38:02.154 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?' (Size = 14), @p1='?', @p2='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Failures" ("HealthCheckName", "IsUpAndRunning", "LastNotified")
VALUES (@p0, @p1, @p2);
SELECT "Id"
FROM "Failures"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:38:02.176 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:38:02.179 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:38:02.190 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:38:02.198 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:38:02.218 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:38:02.218 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:47:07.731 +08:00 [INF] Starting web host
2024-01-23 10:47:09.171 +08:00 [INF] User profile is available. Using 'C:\Users\Admin\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-01-23 10:47:09.240 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:47:09.267 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:47:09.369 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:47:09.393 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:47:09.394 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:47:09.695 +08:00 [INF] Now listening on: https://localhost:5001
2024-01-23 10:47:09.695 +08:00 [INF] Now listening on: http://localhost:5000
2024-01-23 10:47:09.695 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-01-23 10:47:09.696 +08:00 [INF] Hosting environment: Development
2024-01-23 10:47:09.696 +08:00 [INF] Content root path: C:\Users\Admin\Downloads\newTimeTracker\src\TimeTracker
2024-01-23 10:47:10.128 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/health  
2024-01-23 10:47:10.182 +08:00 [INF] Executing endpoint 'Health checks'
2024-01-23 10:47:10.212 +08:00 [INF] Executed endpoint 'Health checks'
2024-01-23 10:47:10.215 +08:00 [INF] Request finished in 88.1944ms 200 application/json
2024-01-23 10:47:10.225 +08:00 [INF] Received HTTP response after 827.03ms - "OK"
2024-01-23 10:47:10.226 +08:00 [INF] End processing HTTP request after 838.2277ms - "OK"
2024-01-23 10:47:10.401 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:47:10.415 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:47:10.421 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:47:10.431 +08:00 [DBG] Creating a new HealthReport history.
2024-01-23 10:47:10.475 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?', @p1='?', @p2='?' (Size = 14), @p3='?', @p4='?', @p5='?' (Size = 29)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Executions" ("DiscoveryService", "LastExecuted", "Name", "OnStateFrom", "Status", "Uri")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5);
SELECT "Id"
FROM "Executions"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:47:10.480 +08:00 [INF] Executing DbCommand [Parameters=[@p6='?', @p7='?', @p8='?', @p9='?' (Size = 6), @p10='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "HealthCheckExecutionEntries" ("Description", "Duration", "HealthCheckExecutionId", "Name", "Status")
VALUES (@p6, @p7, @p8, @p9, @p10);
SELECT "Id"
FROM "HealthCheckExecutionEntries"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:47:10.504 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:47:10.504 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:47:20.506 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:47:20.532 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:47:20.534 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:47:20.551 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:47:20.552 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:47:20.559 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/health  
2024-01-23 10:47:20.560 +08:00 [INF] Executing endpoint 'Health checks'
2024-01-23 10:47:20.566 +08:00 [INF] Executed endpoint 'Health checks'
2024-01-23 10:47:20.566 +08:00 [INF] Request finished in 7.8326ms 200 application/json
2024-01-23 10:47:20.566 +08:00 [INF] Received HTTP response after 14.8122ms - "OK"
2024-01-23 10:47:20.567 +08:00 [INF] End processing HTTP request after 15.1435ms - "OK"
2024-01-23 10:47:20.571 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:47:20.591 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:47:20.595 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:47:20.608 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:47:20.621 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:47:20.624 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "HealthCheckExecutionEntries" SET "Duration" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:47:20.643 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:47:20.643 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:47:30.656 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:47:30.660 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:47:30.663 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:47:30.677 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:47:30.678 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:47:30.679 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/health  
2024-01-23 10:47:30.680 +08:00 [INF] Executing endpoint 'Health checks'
2024-01-23 10:47:30.690 +08:00 [INF] Executed endpoint 'Health checks'
2024-01-23 10:47:30.690 +08:00 [INF] Received HTTP response after 12.3778ms - "OK"
2024-01-23 10:47:30.690 +08:00 [INF] Request finished in 11.2616ms 200 application/json
2024-01-23 10:47:30.690 +08:00 [INF] End processing HTTP request after 13.4142ms - "OK"
2024-01-23 10:47:30.695 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:47:30.707 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:47:30.711 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:47:30.722 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:47:30.733 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:47:30.734 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "HealthCheckExecutionEntries" SET "Duration" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:47:30.756 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:47:30.756 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:47:31.162 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/swagger  
2024-01-23 10:47:31.163 +08:00 [INF] Request finished in 1.3451ms 302 
2024-01-23 10:47:31.168 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/swagger/index.html  
2024-01-23 10:47:31.196 +08:00 [INF] Request finished in 27.0543ms 200 text/html; charset=utf-8
2024-01-23 10:47:31.347 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/swagger/v2/swagger.json  
2024-01-23 10:47:31.835 +08:00 [INF] Request finished in 488.1183ms 200 application/json; charset=utf-8
2024-01-23 10:47:33.406 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/swagger/index.html  
2024-01-23 10:47:33.410 +08:00 [INF] Request finished in 3.7504ms 200 text/html; charset=utf-8
2024-01-23 10:47:33.509 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/swagger/v2/swagger.json  
2024-01-23 10:47:33.510 +08:00 [INF] Request finished in 1.3806ms 200 application/json; charset=utf-8
2024-01-23 10:47:35.168 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/swagger/v1/swagger.json  
2024-01-23 10:47:35.237 +08:00 [INF] Request finished in 68.6076ms 200 application/json; charset=utf-8
2024-01-23 10:47:40.760 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:47:40.761 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:47:40.763 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:47:40.780 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:47:40.781 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:47:40.782 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/health  
2024-01-23 10:47:40.782 +08:00 [INF] Executing endpoint 'Health checks'
2024-01-23 10:47:40.788 +08:00 [INF] Executed endpoint 'Health checks'
2024-01-23 10:47:40.788 +08:00 [INF] Request finished in 6.2081ms 200 application/json
2024-01-23 10:47:40.788 +08:00 [INF] Received HTTP response after 7.4417ms - "OK"
2024-01-23 10:47:40.788 +08:00 [INF] End processing HTTP request after 7.9178ms - "OK"
2024-01-23 10:47:40.793 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:47:40.804 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:47:40.808 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:47:40.819 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:47:40.828 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:47:40.828 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "HealthCheckExecutionEntries" SET "Duration" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:47:40.849 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:47:40.849 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:47:46.233 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/api/v1/clients/2  
2024-01-23 10:47:46.250 +08:00 [INF] Authorization failed.
2024-01-23 10:47:46.253 +08:00 [INF] AuthenticationScheme: Bearer was challenged.
2024-01-23 10:47:46.253 +08:00 [INF] Request finished in 20.2808ms 401 
2024-01-23 10:47:50.861 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:47:50.863 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:47:50.871 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:47:50.887 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:47:50.887 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:47:50.889 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/health  
2024-01-23 10:47:50.890 +08:00 [INF] Executing endpoint 'Health checks'
2024-01-23 10:47:50.898 +08:00 [INF] Executed endpoint 'Health checks'
2024-01-23 10:47:50.899 +08:00 [INF] Request finished in 9.5047ms 200 application/json
2024-01-23 10:47:50.899 +08:00 [INF] Received HTTP response after 11.2823ms - "OK"
2024-01-23 10:47:50.899 +08:00 [INF] End processing HTTP request after 11.9963ms - "OK"
2024-01-23 10:47:50.903 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:47:50.915 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:47:50.919 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:47:50.930 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:47:50.940 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:47:50.941 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "HealthCheckExecutionEntries" SET "Duration" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:47:50.959 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:47:50.959 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:48:00.971 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:48:00.972 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:48:00.974 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:48:00.991 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:48:00.991 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:48:00.992 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/health  
2024-01-23 10:48:00.993 +08:00 [INF] Executing endpoint 'Health checks'
2024-01-23 10:48:00.998 +08:00 [INF] Executed endpoint 'Health checks'
2024-01-23 10:48:00.998 +08:00 [INF] Request finished in 6.0941ms 200 application/json
2024-01-23 10:48:00.998 +08:00 [INF] Received HTTP response after 7.0614ms - "OK"
2024-01-23 10:48:00.998 +08:00 [INF] End processing HTTP request after 7.4015ms - "OK"
2024-01-23 10:48:01.002 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:48:01.015 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:48:01.018 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:48:01.030 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:48:01.038 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:48:01.039 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "HealthCheckExecutionEntries" SET "Duration" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:48:01.058 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:48:01.058 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:48:01.426 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/get-token?admin=true  
2024-01-23 10:48:01.427 +08:00 [INF] Executing endpoint 'TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker)'
2024-01-23 10:48:01.452 +08:00 [INF] Route matched with {action = "GenerateToken", controller = "DummyAuth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GenerateToken(System.String, Boolean) on controller TimeTracker.Controllers.DummyAuthController (TimeTracker).
2024-01-23 10:48:01.484 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-01-23 10:48:01.488 +08:00 [INF] Executed action TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker) in 32.618ms
2024-01-23 10:48:01.489 +08:00 [INF] Executed endpoint 'TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker)'
2024-01-23 10:48:01.489 +08:00 [INF] Request finished in 63.4294ms 200 text/plain; charset=utf-8
2024-01-23 10:48:11.066 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:48:11.067 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:48:11.068 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:48:11.087 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:48:11.087 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:48:11.088 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/health  
2024-01-23 10:48:11.089 +08:00 [INF] Executing endpoint 'Health checks'
2024-01-23 10:48:11.095 +08:00 [INF] Executed endpoint 'Health checks'
2024-01-23 10:48:11.096 +08:00 [INF] Request finished in 7.3607ms 200 application/json
2024-01-23 10:48:11.096 +08:00 [INF] Received HTTP response after 8.6849ms - "OK"
2024-01-23 10:48:11.096 +08:00 [INF] End processing HTTP request after 9.1625ms - "OK"
2024-01-23 10:48:11.099 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:48:11.111 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:48:11.115 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:48:11.126 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:48:11.135 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:48:11.135 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "HealthCheckExecutionEntries" SET "Duration" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:48:11.153 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:48:11.153 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:48:21.153 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:48:21.155 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:48:21.158 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:48:21.172 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:48:21.172 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:48:21.173 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/health  
2024-01-23 10:48:21.174 +08:00 [INF] Executing endpoint 'Health checks'
2024-01-23 10:48:21.182 +08:00 [INF] Executed endpoint 'Health checks'
2024-01-23 10:48:21.182 +08:00 [INF] Request finished in 9.0185ms 200 application/json
2024-01-23 10:48:21.182 +08:00 [INF] Received HTTP response after 10.1043ms - "OK"
2024-01-23 10:48:21.182 +08:00 [INF] End processing HTTP request after 10.5036ms - "OK"
2024-01-23 10:48:21.188 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:48:21.199 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:48:21.203 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:48:21.214 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:48:21.224 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:48:21.225 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "HealthCheckExecutionEntries" SET "Duration" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:48:21.243 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:48:21.243 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:48:31.256 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:48:31.256 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:48:31.258 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:48:31.270 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:48:31.270 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:48:31.270 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/health  
2024-01-23 10:48:31.271 +08:00 [INF] Executing endpoint 'Health checks'
2024-01-23 10:48:31.277 +08:00 [INF] Executed endpoint 'Health checks'
2024-01-23 10:48:31.277 +08:00 [INF] Request finished in 6.7253ms 200 application/json
2024-01-23 10:48:31.277 +08:00 [INF] Received HTTP response after 7.6328ms - "OK"
2024-01-23 10:48:31.277 +08:00 [INF] End processing HTTP request after 7.8984ms - "OK"
2024-01-23 10:48:31.281 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:48:31.293 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:48:31.296 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:48:31.307 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:48:31.315 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:48:31.315 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "HealthCheckExecutionEntries" SET "Duration" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:48:31.336 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:48:31.336 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:48:41.343 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:48:41.344 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:48:41.345 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:48:41.358 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:48:41.358 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:48:41.359 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/health  
2024-01-23 10:48:41.360 +08:00 [INF] Executing endpoint 'Health checks'
2024-01-23 10:48:41.365 +08:00 [INF] Executed endpoint 'Health checks'
2024-01-23 10:48:41.366 +08:00 [INF] Request finished in 6.4823ms 200 application/json
2024-01-23 10:48:41.366 +08:00 [INF] Received HTTP response after 7.4657ms - "OK"
2024-01-23 10:48:41.366 +08:00 [INF] End processing HTTP request after 7.7914ms - "OK"
2024-01-23 10:48:41.370 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:48:41.384 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:48:41.387 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:48:41.399 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:48:41.408 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:48:41.409 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "HealthCheckExecutionEntries" SET "Duration" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:48:41.433 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:48:41.433 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:48:51.439 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:48:51.440 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:48:51.442 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:48:51.459 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:48:51.460 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:48:51.461 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/health  
2024-01-23 10:48:51.461 +08:00 [INF] Executing endpoint 'Health checks'
2024-01-23 10:48:51.467 +08:00 [INF] Executed endpoint 'Health checks'
2024-01-23 10:48:51.467 +08:00 [INF] Request finished in 6.6045ms 200 application/json
2024-01-23 10:48:51.467 +08:00 [INF] Received HTTP response after 7.8376ms - "OK"
2024-01-23 10:48:51.467 +08:00 [INF] End processing HTTP request after 8.2753ms - "OK"
2024-01-23 10:48:51.472 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:48:51.484 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:48:51.489 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:48:51.501 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:48:51.511 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:48:51.512 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "HealthCheckExecutionEntries" SET "Duration" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:48:51.530 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:48:51.530 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:49:01.536 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:49:01.537 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:49:01.538 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:49:01.555 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:49:01.555 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:49:01.556 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/health  
2024-01-23 10:49:01.556 +08:00 [INF] Executing endpoint 'Health checks'
2024-01-23 10:49:01.561 +08:00 [INF] Executed endpoint 'Health checks'
2024-01-23 10:49:01.562 +08:00 [INF] Request finished in 5.8182ms 200 application/json
2024-01-23 10:49:01.562 +08:00 [INF] Received HTTP response after 6.8099ms - "OK"
2024-01-23 10:49:01.562 +08:00 [INF] End processing HTTP request after 7.0429ms - "OK"
2024-01-23 10:49:01.566 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:49:01.578 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:49:01.582 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:49:01.595 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:49:01.605 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:49:01.606 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "HealthCheckExecutionEntries" SET "Duration" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:49:01.627 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:49:01.627 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:49:11.656 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:49:11.657 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:49:11.658 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:49:11.675 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:49:11.675 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:49:11.680 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/health  
2024-01-23 10:49:11.680 +08:00 [INF] Executing endpoint 'Health checks'
2024-01-23 10:49:11.685 +08:00 [INF] Executed endpoint 'Health checks'
2024-01-23 10:49:11.686 +08:00 [INF] Request finished in 5.8151ms 200 application/json
2024-01-23 10:49:11.686 +08:00 [INF] Received HTTP response after 10.753ms - "OK"
2024-01-23 10:49:11.686 +08:00 [INF] End processing HTTP request after 11.0499ms - "OK"
2024-01-23 10:49:11.690 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:49:11.701 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:49:11.705 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:49:11.716 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:49:11.724 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:49:11.728 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "HealthCheckExecutionEntries" SET "Duration" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:49:11.746 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:49:11.746 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:49:21.745 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:49:21.746 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:49:21.747 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:49:21.765 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:49:21.765 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:49:21.766 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/health  
2024-01-23 10:49:21.766 +08:00 [INF] Executing endpoint 'Health checks'
2024-01-23 10:49:21.772 +08:00 [INF] Executed endpoint 'Health checks'
2024-01-23 10:49:21.772 +08:00 [INF] Received HTTP response after 7.2596ms - "OK"
2024-01-23 10:49:21.772 +08:00 [INF] End processing HTTP request after 7.641ms - "OK"
2024-01-23 10:49:21.772 +08:00 [INF] Request finished in 6.8183ms 200 application/json
2024-01-23 10:49:21.777 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:49:21.787 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:49:21.792 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:49:21.802 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:49:21.812 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:49:21.813 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "HealthCheckExecutionEntries" SET "Duration" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:49:21.832 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:49:21.832 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:49:31.839 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:49:31.839 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:49:31.841 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:49:31.869 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:49:31.869 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:49:31.871 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/health  
2024-01-23 10:49:31.871 +08:00 [INF] Executing endpoint 'Health checks'
2024-01-23 10:49:31.879 +08:00 [INF] Executed endpoint 'Health checks'
2024-01-23 10:49:31.879 +08:00 [INF] Received HTTP response after 9.6136ms - "OK"
2024-01-23 10:49:31.879 +08:00 [INF] Request finished in 8.4433ms 200 application/json
2024-01-23 10:49:31.879 +08:00 [INF] End processing HTTP request after 9.9979ms - "OK"
2024-01-23 10:49:31.883 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:49:31.896 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:49:31.900 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:49:31.913 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:49:31.922 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:49:31.923 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "HealthCheckExecutionEntries" SET "Duration" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:49:31.941 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:49:31.941 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:49:41.964 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:49:41.965 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:49:41.966 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:49:41.980 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:49:41.980 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:49:41.981 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/health  
2024-01-23 10:49:41.981 +08:00 [INF] Executing endpoint 'Health checks'
2024-01-23 10:49:41.987 +08:00 [INF] Executed endpoint 'Health checks'
2024-01-23 10:49:41.987 +08:00 [INF] Received HTTP response after 7.0622ms - "OK"
2024-01-23 10:49:41.987 +08:00 [INF] Request finished in 6.2254ms 200 application/json
2024-01-23 10:49:41.987 +08:00 [INF] End processing HTTP request after 7.4021ms - "OK"
2024-01-23 10:49:41.991 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:49:42.002 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:49:42.005 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:49:42.017 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:49:42.026 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:49:42.027 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "HealthCheckExecutionEntries" SET "Duration" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:49:42.045 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:49:42.046 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:49:52.058 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:49:52.059 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:49:52.060 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:49:52.077 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:49:52.078 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:49:52.078 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/health  
2024-01-23 10:49:52.079 +08:00 [INF] Executing endpoint 'Health checks'
2024-01-23 10:49:52.084 +08:00 [INF] Executed endpoint 'Health checks'
2024-01-23 10:49:52.084 +08:00 [INF] Request finished in 5.4601ms 200 application/json
2024-01-23 10:49:52.084 +08:00 [INF] Received HTTP response after 6.3679ms - "OK"
2024-01-23 10:49:52.084 +08:00 [INF] End processing HTTP request after 6.6108ms - "OK"
2024-01-23 10:49:52.087 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:49:52.098 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:49:52.101 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:49:52.113 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:49:52.121 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:49:52.121 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "HealthCheckExecutionEntries" SET "Duration" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:49:52.146 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:49:52.146 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:50:02.157 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:50:02.158 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:50:02.159 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:50:02.177 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:50:02.177 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:50:02.178 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/health  
2024-01-23 10:50:02.179 +08:00 [INF] Executing endpoint 'Health checks'
2024-01-23 10:50:02.184 +08:00 [INF] Executed endpoint 'Health checks'
2024-01-23 10:50:02.184 +08:00 [INF] Request finished in 5.8688ms 200 application/json
2024-01-23 10:50:02.184 +08:00 [INF] Received HTTP response after 6.8299ms - "OK"
2024-01-23 10:50:02.184 +08:00 [INF] End processing HTTP request after 7.1081ms - "OK"
2024-01-23 10:50:02.187 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:50:02.199 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:50:02.202 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:50:02.215 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:50:02.223 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:50:02.224 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "HealthCheckExecutionEntries" SET "Duration" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:50:02.245 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:50:02.246 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:50:07.281 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/get-token  
2024-01-23 10:50:07.281 +08:00 [INF] CORS policy execution successful.
2024-01-23 10:50:07.282 +08:00 [INF] Executing endpoint 'TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker)'
2024-01-23 10:50:07.282 +08:00 [INF] Route matched with {action = "GenerateToken", controller = "DummyAuth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GenerateToken(System.String, Boolean) on controller TimeTracker.Controllers.DummyAuthController (TimeTracker).
2024-01-23 10:50:07.283 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-01-23 10:50:07.290 +08:00 [INF] Executed action TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker) in 7.339ms
2024-01-23 10:50:07.290 +08:00 [INF] Executed endpoint 'TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker)'
2024-01-23 10:50:07.290 +08:00 [INF] Request finished in 9.4127ms 200 text/plain; charset=utf-8
2024-01-23 10:50:07.326 +08:00 [INF] Request starting HTTP/1.1 OPTIONS https://localhost:5001/api/v2/users/1  
2024-01-23 10:50:07.327 +08:00 [INF] CORS policy execution successful.
2024-01-23 10:50:07.327 +08:00 [INF] Request finished in 1.5965ms 204 
2024-01-23 10:50:07.329 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/api/v2/users/1  
2024-01-23 10:50:07.350 +08:00 [INF] Successfully validated the token.
2024-01-23 10:50:07.351 +08:00 [INF] Authorization was successful.
2024-01-23 10:50:07.351 +08:00 [INF] CORS policy execution successful.
2024-01-23 10:50:07.351 +08:00 [INF] Executing endpoint 'TimeTracker.Controllers.UsersController.GetById (TimeTracker)'
2024-01-23 10:50:07.355 +08:00 [INF] Route matched with {action = "GetById", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[TimeTracker.Models.UserModel]] GetById(Int64) on controller TimeTracker.Controllers.UsersController (TimeTracker).
2024-01-23 10:50:07.360 +08:00 [DBG] Getting a user with id 1
2024-01-23 10:50:07.398 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'TimeTrackerDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:50:07.409 +08:00 [INF] Executing DbCommand [Parameters=[@__p_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."HourRate", "u"."Name"
FROM "Users" AS "u"
WHERE ("u"."Id" = @__p_0) AND @__p_0 IS NOT NULL
LIMIT 1
2024-01-23 10:50:07.413 +08:00 [INF] Executing ObjectResult, writing value of type 'TimeTracker.Models.UserModel'.
2024-01-23 10:50:07.420 +08:00 [INF] Executed action TimeTracker.Controllers.UsersController.GetById (TimeTracker) in 65.0722ms
2024-01-23 10:50:07.420 +08:00 [INF] Executed endpoint 'TimeTracker.Controllers.UsersController.GetById (TimeTracker)'
2024-01-23 10:50:07.421 +08:00 [INF] Request finished in 91.3911ms 200 application/json; charset=utf-8
2024-01-23 10:50:07.476 +08:00 [INF] Request starting HTTP/1.1 OPTIONS https://localhost:5001/api/v2/time-entries/user/1/2024/1  
2024-01-23 10:50:07.476 +08:00 [INF] CORS policy execution successful.
2024-01-23 10:50:07.476 +08:00 [INF] Request finished in 0.4469ms 204 
2024-01-23 10:50:07.479 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/api/v2/time-entries/user/1/2024/1  
2024-01-23 10:50:07.479 +08:00 [INF] Successfully validated the token.
2024-01-23 10:50:07.480 +08:00 [INF] Authorization was successful.
2024-01-23 10:50:07.480 +08:00 [INF] CORS policy execution successful.
2024-01-23 10:50:07.480 +08:00 [INF] Executing endpoint 'TimeTracker.Controllers.TimeEntriesController.GetByUserAndMonth (TimeTracker)'
2024-01-23 10:50:07.483 +08:00 [INF] Route matched with {action = "GetByUserAndMonth", controller = "TimeEntries"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[TimeTracker.Models.TimeEntryModel[]]] GetByUserAndMonth(Int64, Int32, Int32) on controller TimeTracker.Controllers.TimeEntriesController (TimeTracker).
2024-01-23 10:50:07.486 +08:00 [DBG] Getting all time entries for month 2024-1 for user with id 1
2024-01-23 10:50:07.486 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'TimeTrackerDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:50:07.508 +08:00 [INF] Executing DbCommand [Parameters=[@__userId_0='?', @__startDate_1='?', @__endDate_2='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."Description", "t"."EntryDate", "t"."HourRate", "t"."Hours", "t"."ProjectId", "t"."UserId", "u"."Id", "u"."HourRate", "u"."Name", "p"."Id", "p"."ClientId", "p"."Name", "c"."Id", "c"."Name"
FROM "TimeEntries" AS "t"
INNER JOIN "Users" AS "u" ON "t"."UserId" = "u"."Id"
INNER JOIN "Projects" AS "p" ON "t"."ProjectId" = "p"."Id"
INNER JOIN "Clients" AS "c" ON "p"."ClientId" = "c"."Id"
WHERE ((("u"."Id" = @__userId_0) AND @__userId_0 IS NOT NULL) AND ("t"."EntryDate" >= @__startDate_1)) AND ("t"."EntryDate" < @__endDate_2)
ORDER BY "t"."EntryDate"
2024-01-23 10:50:07.509 +08:00 [INF] Executing ObjectResult, writing value of type 'TimeTracker.Models.TimeEntryModel[]'.
2024-01-23 10:50:07.511 +08:00 [INF] Executed action TimeTracker.Controllers.TimeEntriesController.GetByUserAndMonth (TimeTracker) in 27.6642ms
2024-01-23 10:50:07.511 +08:00 [INF] Executed endpoint 'TimeTracker.Controllers.TimeEntriesController.GetByUserAndMonth (TimeTracker)'
2024-01-23 10:50:07.511 +08:00 [INF] Request finished in 32.2856ms 200 application/json; charset=utf-8
2024-01-23 10:50:12.251 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:50:12.252 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:50:12.253 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:50:12.265 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:50:12.266 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:50:12.266 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/health  
2024-01-23 10:50:12.267 +08:00 [INF] Executing endpoint 'Health checks'
2024-01-23 10:50:12.272 +08:00 [INF] Executed endpoint 'Health checks'
2024-01-23 10:50:12.272 +08:00 [INF] Request finished in 5.7401ms 200 application/json
2024-01-23 10:50:12.272 +08:00 [INF] Received HTTP response after 6.5075ms - "OK"
2024-01-23 10:50:12.272 +08:00 [INF] End processing HTTP request after 6.7601ms - "OK"
2024-01-23 10:50:12.276 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:50:12.286 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:50:12.290 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:50:12.301 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:50:12.309 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:50:12.309 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "HealthCheckExecutionEntries" SET "Duration" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:50:12.331 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:50:12.331 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:50:16.363 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/get-token  
2024-01-23 10:50:16.363 +08:00 [INF] CORS policy execution successful.
2024-01-23 10:50:16.363 +08:00 [INF] Executing endpoint 'TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker)'
2024-01-23 10:50:16.364 +08:00 [INF] Route matched with {action = "GenerateToken", controller = "DummyAuth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GenerateToken(System.String, Boolean) on controller TimeTracker.Controllers.DummyAuthController (TimeTracker).
2024-01-23 10:50:16.365 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-01-23 10:50:16.365 +08:00 [INF] Executed action TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker) in 1.2672ms
2024-01-23 10:50:16.365 +08:00 [INF] Executed endpoint 'TimeTracker.Controllers.DummyAuthController.GenerateToken (TimeTracker)'
2024-01-23 10:50:16.365 +08:00 [INF] Request finished in 2.1883ms 200 text/plain; charset=utf-8
2024-01-23 10:50:16.377 +08:00 [INF] Request starting HTTP/1.1 OPTIONS https://localhost:5001/api/v2/users/12  
2024-01-23 10:50:16.377 +08:00 [INF] CORS policy execution successful.
2024-01-23 10:50:16.377 +08:00 [INF] Request finished in 0.6736ms 204 
2024-01-23 10:50:16.379 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/api/v2/users/12  
2024-01-23 10:50:16.380 +08:00 [INF] Successfully validated the token.
2024-01-23 10:50:16.380 +08:00 [INF] Authorization was successful.
2024-01-23 10:50:16.380 +08:00 [INF] CORS policy execution successful.
2024-01-23 10:50:16.380 +08:00 [INF] Executing endpoint 'TimeTracker.Controllers.UsersController.GetById (TimeTracker)'
2024-01-23 10:50:16.380 +08:00 [INF] Route matched with {action = "GetById", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[TimeTracker.Models.UserModel]] GetById(Int64) on controller TimeTracker.Controllers.UsersController (TimeTracker).
2024-01-23 10:50:16.382 +08:00 [DBG] Getting a user with id 12
2024-01-23 10:50:16.382 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'TimeTrackerDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:50:16.385 +08:00 [INF] Executing DbCommand [Parameters=[@__p_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."HourRate", "u"."Name"
FROM "Users" AS "u"
WHERE ("u"."Id" = @__p_0) AND @__p_0 IS NOT NULL
LIMIT 1
2024-01-23 10:50:16.393 +08:00 [INF] Executing ObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ProblemDetails'.
2024-01-23 10:50:16.394 +08:00 [INF] Executed action TimeTracker.Controllers.UsersController.GetById (TimeTracker) in 13.9692ms
2024-01-23 10:50:16.395 +08:00 [INF] Executed endpoint 'TimeTracker.Controllers.UsersController.GetById (TimeTracker)'
2024-01-23 10:50:16.395 +08:00 [INF] Request finished in 15.3386ms 404 application/problem+json; charset=utf-8
2024-01-23 10:50:22.338 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:50:22.339 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:50:22.340 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:50:22.358 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:50:22.359 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:50:22.359 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/health  
2024-01-23 10:50:22.359 +08:00 [INF] Executing endpoint 'Health checks'
2024-01-23 10:50:22.364 +08:00 [INF] Executed endpoint 'Health checks'
2024-01-23 10:50:22.365 +08:00 [INF] Request finished in 5.3137ms 200 application/json
2024-01-23 10:50:22.365 +08:00 [INF] Received HTTP response after 6.0533ms - "OK"
2024-01-23 10:50:22.365 +08:00 [INF] End processing HTTP request after 6.3209ms - "OK"
2024-01-23 10:50:22.368 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:50:22.380 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:50:22.383 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:50:22.394 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:50:22.403 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:50:22.403 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "HealthCheckExecutionEntries" SET "Duration" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:50:22.421 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:50:22.421 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:50:32.432 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:50:32.433 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:50:32.434 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:50:32.445 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:50:32.445 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:50:32.446 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/health  
2024-01-23 10:50:32.446 +08:00 [INF] Executing endpoint 'Health checks'
2024-01-23 10:50:32.452 +08:00 [INF] Executed endpoint 'Health checks'
2024-01-23 10:50:32.452 +08:00 [INF] Request finished in 6.1267ms 200 application/json
2024-01-23 10:50:32.452 +08:00 [INF] Received HTTP response after 6.6319ms - "OK"
2024-01-23 10:50:32.452 +08:00 [INF] End processing HTTP request after 6.9752ms - "OK"
2024-01-23 10:50:32.456 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:50:32.467 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:50:32.471 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:50:32.482 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:50:32.492 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:50:32.492 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "HealthCheckExecutionEntries" SET "Duration" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:50:32.511 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:50:32.511 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:50:42.512 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:50:42.513 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:50:42.514 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:50:42.525 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:50:42.525 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:50:42.525 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/health  
2024-01-23 10:50:42.525 +08:00 [INF] Executing endpoint 'Health checks'
2024-01-23 10:50:42.531 +08:00 [INF] Executed endpoint 'Health checks'
2024-01-23 10:50:42.531 +08:00 [INF] Received HTTP response after 6.3561ms - "OK"
2024-01-23 10:50:42.531 +08:00 [INF] Request finished in 5.8902ms 200 application/json
2024-01-23 10:50:42.531 +08:00 [INF] End processing HTTP request after 6.6156ms - "OK"
2024-01-23 10:50:42.534 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:50:42.545 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:50:42.548 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:50:42.558 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:50:42.567 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:50:42.567 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "HealthCheckExecutionEntries" SET "Duration" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:50:42.585 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:50:42.585 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:50:52.590 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:50:52.591 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:50:52.592 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:50:52.603 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:50:52.604 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:50:52.604 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/health  
2024-01-23 10:50:52.604 +08:00 [INF] Executing endpoint 'Health checks'
2024-01-23 10:50:52.610 +08:00 [INF] Executed endpoint 'Health checks'
2024-01-23 10:50:52.610 +08:00 [INF] Request finished in 5.9283ms 200 application/json
2024-01-23 10:50:52.610 +08:00 [INF] Received HTTP response after 6.5767ms - "OK"
2024-01-23 10:50:52.610 +08:00 [INF] End processing HTTP request after 6.8843ms - "OK"
2024-01-23 10:50:52.614 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:50:52.625 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:50:52.628 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:50:52.638 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:50:52.646 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:50:52.646 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "HealthCheckExecutionEntries" SET "Duration" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:50:52.667 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:50:52.667 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:51:02.671 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:51:02.672 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:51:02.674 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:51:02.698 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:51:02.698 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:51:02.698 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/health  
2024-01-23 10:51:02.699 +08:00 [INF] Executing endpoint 'Health checks'
2024-01-23 10:51:02.704 +08:00 [INF] Executed endpoint 'Health checks'
2024-01-23 10:51:02.705 +08:00 [INF] Request finished in 6.2427ms 200 application/json
2024-01-23 10:51:02.705 +08:00 [INF] Received HTTP response after 7.0083ms - "OK"
2024-01-23 10:51:02.705 +08:00 [INF] End processing HTTP request after 7.3476ms - "OK"
2024-01-23 10:51:02.709 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:51:02.722 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:51:02.726 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:51:02.763 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:51:02.771 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:51:02.772 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "HealthCheckExecutionEntries" SET "Duration" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:51:02.919 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:51:02.920 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:51:12.927 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:51:12.928 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:51:12.929 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:51:12.945 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:51:12.945 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:51:12.950 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/health  
2024-01-23 10:51:12.950 +08:00 [INF] Executing endpoint 'Health checks'
2024-01-23 10:51:12.955 +08:00 [INF] Executed endpoint 'Health checks'
2024-01-23 10:51:12.955 +08:00 [INF] Request finished in 5.6048ms 200 application/json
2024-01-23 10:51:12.955 +08:00 [INF] Received HTTP response after 10.2928ms - "OK"
2024-01-23 10:51:12.956 +08:00 [INF] End processing HTTP request after 10.5379ms - "OK"
2024-01-23 10:51:12.959 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:51:12.970 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:51:12.975 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:51:12.986 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:51:12.995 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:51:12.996 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "HealthCheckExecutionEntries" SET "Duration" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:51:13.017 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:51:13.017 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:51:23.021 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:51:23.022 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:51:23.023 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:51:23.042 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:51:23.043 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:51:23.043 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/health  
2024-01-23 10:51:23.043 +08:00 [INF] Executing endpoint 'Health checks'
2024-01-23 10:51:23.049 +08:00 [INF] Executed endpoint 'Health checks'
2024-01-23 10:51:23.049 +08:00 [INF] Request finished in 5.7575ms 200 application/json
2024-01-23 10:51:23.049 +08:00 [INF] Received HTTP response after 6.5075ms - "OK"
2024-01-23 10:51:23.049 +08:00 [INF] End processing HTTP request after 6.8685ms - "OK"
2024-01-23 10:51:23.053 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:51:23.065 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:51:23.068 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:51:23.080 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:51:23.088 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:51:23.088 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "HealthCheckExecutionEntries" SET "Duration" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:51:23.110 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:51:23.111 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:53:26.687 +08:00 [INF] Starting web host
2024-01-23 10:53:28.184 +08:00 [INF] User profile is available. Using 'C:\Users\Admin\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-01-23 10:53:28.230 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:53:28.250 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:53:28.356 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:53:28.378 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:53:28.379 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:53:28.705 +08:00 [INF] Now listening on: https://localhost:5001
2024-01-23 10:53:28.705 +08:00 [INF] Now listening on: http://localhost:5000
2024-01-23 10:53:28.706 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-01-23 10:53:28.706 +08:00 [INF] Hosting environment: Development
2024-01-23 10:53:28.706 +08:00 [INF] Content root path: C:\Users\Admin\Downloads\newTimeTracker\src\TimeTracker
2024-01-23 10:53:29.107 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/health  
2024-01-23 10:53:29.166 +08:00 [INF] Executing endpoint 'Health checks'
2024-01-23 10:53:29.200 +08:00 [INF] Executed endpoint 'Health checks'
2024-01-23 10:53:29.202 +08:00 [INF] Request finished in 98.3016ms 200 application/json
2024-01-23 10:53:29.209 +08:00 [INF] Received HTTP response after 827.7134ms - "OK"
2024-01-23 10:53:29.210 +08:00 [INF] End processing HTTP request after 834.9263ms - "OK"
2024-01-23 10:53:29.394 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:53:29.410 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:53:29.416 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:53:29.428 +08:00 [DBG] Creating a new HealthReport history.
2024-01-23 10:53:29.487 +08:00 [INF] Executing DbCommand [Parameters=[@p0='?', @p1='?', @p2='?' (Size = 14), @p3='?', @p4='?', @p5='?' (Size = 29)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Executions" ("DiscoveryService", "LastExecuted", "Name", "OnStateFrom", "Status", "Uri")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5);
SELECT "Id"
FROM "Executions"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:53:29.492 +08:00 [INF] Executing DbCommand [Parameters=[@p6='?', @p7='?', @p8='?', @p9='?' (Size = 6), @p10='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "HealthCheckExecutionEntries" ("Description", "Duration", "HealthCheckExecutionId", "Name", "Status")
VALUES (@p6, @p7, @p8, @p9, @p10);
SELECT "Id"
FROM "HealthCheckExecutionEntries"
WHERE changes() = 1 AND "Id" = last_insert_rowid();
2024-01-23 10:53:29.513 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:53:29.513 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:53:39.517 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:53:39.543 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:53:39.546 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:53:39.563 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:53:39.563 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:53:39.568 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/health  
2024-01-23 10:53:39.569 +08:00 [INF] Executing endpoint 'Health checks'
2024-01-23 10:53:39.575 +08:00 [INF] Executed endpoint 'Health checks'
2024-01-23 10:53:39.575 +08:00 [INF] Request finished in 7.4244ms 200 application/json
2024-01-23 10:53:39.576 +08:00 [INF] Received HTTP response after 12.7799ms - "OK"
2024-01-23 10:53:39.576 +08:00 [INF] End processing HTTP request after 13.2044ms - "OK"
2024-01-23 10:53:39.580 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:53:39.599 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:53:39.603 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:53:39.615 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:53:39.627 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:53:39.629 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "HealthCheckExecutionEntries" SET "Duration" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:53:39.647 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:53:39.648 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:53:49.647 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:53:49.650 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:53:49.652 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:53:49.670 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:53:49.671 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:53:49.672 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/health  
2024-01-23 10:53:49.674 +08:00 [INF] Executing endpoint 'Health checks'
2024-01-23 10:53:49.680 +08:00 [INF] Executed endpoint 'Health checks'
2024-01-23 10:53:49.680 +08:00 [INF] Received HTTP response after 9.1388ms - "OK"
2024-01-23 10:53:49.683 +08:00 [INF] End processing HTTP request after 12.4291ms - "OK"
2024-01-23 10:53:49.683 +08:00 [INF] Request finished in 10.7188ms 200 application/json
2024-01-23 10:53:49.688 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:53:49.700 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:53:49.704 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:53:49.716 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:53:49.725 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:53:49.725 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "HealthCheckExecutionEntries" SET "Duration" = @p0
WHERE "Id" = @p1;
SELECT changes();
2024-01-23 10:53:49.747 +08:00 [DBG] HealthReportCollector has completed.
2024-01-23 10:53:49.748 +08:00 [DBG] HealthCheck collector HostedService executed successfully.
2024-01-23 10:53:59.749 +08:00 [DBG] Executing HealthCheck collector HostedService.
2024-01-23 10:53:59.752 +08:00 [INF] Entity Framework Core 3.0.0 initialized 'HealthChecksDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
2024-01-23 10:53:59.754 +08:00 [INF] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "c"."Id", "c"."DiscoveryService", "c"."Name", "c"."Uri"
FROM "Configurations" AS "c"
2024-01-23 10:53:59.767 +08:00 [INF] Start processing HTTP request GET "https://localhost:5001/health"
2024-01-23 10:53:59.767 +08:00 [INF] Sending HTTP request GET "https://localhost:5001/health"
2024-01-23 10:53:59.768 +08:00 [INF] Request starting HTTP/1.1 GET https://localhost:5001/health  
2024-01-23 10:53:59.768 +08:00 [INF] Executing endpoint 'Health checks'
2024-01-23 10:53:59.775 +08:00 [INF] Executed endpoint 'Health checks'
2024-01-23 10:53:59.775 +08:00 [INF] Received HTTP response after 8.1758ms - "OK"
2024-01-23 10:53:59.775 +08:00 [INF] Request finished in 7.1522ms 200 application/json
2024-01-23 10:53:59.775 +08:00 [INF] End processing HTTP request after 8.717ms - "OK"
2024-01-23 10:53:59.779 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:53:59.790 +08:00 [DBG] HealthReportCollector - health report execution history saved.
2024-01-23 10:53:59.793 +08:00 [INF] Executing DbCommand [Parameters=[@__configuration_Name_0='?' (Size = 14)], CommandType='"Text"', CommandTimeout='30']
SELECT "t"."Id", "t"."DiscoveryService", "t"."LastExecuted", "t"."Name", "t"."OnStateFrom", "t"."Status", "t"."Uri", "h"."Id", "h"."HealthCheckExecutionId", "h"."On", "h"."Status", "h0"."Id", "h0"."Description", "h0"."Duration", "h0"."HealthCheckExecutionId", "h0"."Name", "h0"."Status"
FROM (
    SELECT "e"."Id", "e"."DiscoveryService", "e"."LastExecuted", "e"."Name", "e"."OnStateFrom", "e"."Status", "e"."Uri"
    FROM "Executions" AS "e"
    WHERE ("e"."Name" = @__configuration_Name_0) AND @__configuration_Name_0 IS NOT NULL
    LIMIT 2
) AS "t"
LEFT JOIN "HealthCheckExecutionHistories" AS "h" ON "t"."Id" = "h"."HealthCheckExecutionId"
LEFT JOIN "HealthCheckExecutionEntries" AS "h0" ON "t"."Id" = "h0"."HealthCheckExecutionId"
ORDER BY "t"."Id", "h"."Id", "h0"."Id"
2024-01-23 10:53:59.804 +08:00 [DBG] HealthReport history already exists and is in the same state, updating the values.
2024-01-23 10:53:59.812 +08:00 [INF] Executing DbCommand [Parameters=[@p1='?', @p0='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "Executions" SET "LastExecuted" = @p0
WHERE "Id" = @p1;
SELECT changes();
